
MCU_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f60  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080020f4  080020f4  000120f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002174  08002174  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002174  08002174  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002174  08002174  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002174  08002174  00012174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002178  08002178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800217c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000004  08002180  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08002180  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003320  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000112d  00000000  00000000  00023397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000498  00000000  00000000  000244c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000034b  00000000  00000000  00024960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d65  00000000  00000000  00024cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004053  00000000  00000000  00026a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084192  00000000  00000000  0002aa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ef0  00000000  00000000  000aebf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  000afae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080020dc 	.word	0x080020dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080020dc 	.word	0x080020dc

080001d4 <Comms_Init>:
/*****************************************************************/
/******************** Function Definitions ***********************/
/*****************************************************************/


void Comms_Init(Type_Comms Comms_Type, u16 Baudrate){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	80bb      	strh	r3, [r7, #4]
	switch(Comms_Type){
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d120      	bne.n	800022c <Comms_Init+0x58>
	case USART_1:
		MRCC_vEnableClock(AHB1, RCC_GPIOA_EN);
 80001ea:	2100      	movs	r1, #0
 80001ec:	2000      	movs	r0, #0
 80001ee:	f001 fb0b 	bl	8001808 <MRCC_vEnableClock>
		MRCC_vEnableClock(APB2, RCC_USART1_EN);
 80001f2:	2104      	movs	r1, #4
 80001f4:	2003      	movs	r0, #3
 80001f6:	f001 fb07 	bl	8001808 <MRCC_vEnableClock>

		MGPIO_voidSetPinMode(_GPIOA_PORT,  _PIN_9, _MODE_ALTF);
 80001fa:	2202      	movs	r2, #2
 80001fc:	2109      	movs	r1, #9
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 ff40 	bl	8001084 <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinAltFn(_GPIOA_PORT,  _PIN_9, _ALTFN_7);
 8000204:	2207      	movs	r2, #7
 8000206:	2109      	movs	r1, #9
 8000208:	2000      	movs	r0, #0
 800020a:	f001 f963 	bl	80014d4 <MGPIO_voidSetPinAltFn>

		MGPIO_voidSetPinMode(_GPIOA_PORT,  _PIN_10, _MODE_ALTF);
 800020e:	2202      	movs	r2, #2
 8000210:	210a      	movs	r1, #10
 8000212:	2000      	movs	r0, #0
 8000214:	f000 ff36 	bl	8001084 <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinAltFn(_GPIOA_PORT,  _PIN_10, _ALTFN_7);
 8000218:	2207      	movs	r2, #7
 800021a:	210a      	movs	r1, #10
 800021c:	2000      	movs	r0, #0
 800021e:	f001 f959 	bl	80014d4 <MGPIO_voidSetPinAltFn>

		MUSART_voidInit(Baudrate);
 8000222:	88bb      	ldrh	r3, [r7, #4]
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fbbd 	bl	80019a4 <MUSART_voidInit>
		break;
 800022a:	e000      	b.n	800022e <Comms_Init+0x5a>
		MGPIO_voidSetPinAltFn(_GPIOE_PORT,  _PIN_14, _ALTFN_5);

		MSPI4_voidInit();
		break;*/
	default:
		break;
 800022c:	bf00      	nop
	}
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}

08000236 <Comms_Enable_Disable>:

void Comms_Enable_Disable(Type_Comms Comms_Type, u8 Enable_Disable){
 8000236:	b580      	push	{r7, lr}
 8000238:	b082      	sub	sp, #8
 800023a:	af00      	add	r7, sp, #0
 800023c:	4603      	mov	r3, r0
 800023e:	460a      	mov	r2, r1
 8000240:	71fb      	strb	r3, [r7, #7]
 8000242:	4613      	mov	r3, r2
 8000244:	71bb      	strb	r3, [r7, #6]
	if(Enable_Disable){
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d002      	beq.n	8000252 <Comms_Enable_Disable+0x1c>
		MUSART_voidEnable();
 800024c:	f001 fc56 	bl	8001afc <MUSART_voidEnable>
	}
	else{
		MUSART_voidDisable();
	}
}
 8000250:	e001      	b.n	8000256 <Comms_Enable_Disable+0x20>
		MUSART_voidDisable();
 8000252:	f001 fc63 	bl	8001b1c <MUSART_voidDisable>
}
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <Comms_Read_Write>:

u8 Comms_Read_Write(Type_Comms Comms_Type, u8* USART_Data, u8 Len, /*u8 SPI_Data,*/ u8 W_R){
 800025e:	b580      	push	{r7, lr}
 8000260:	b084      	sub	sp, #16
 8000262:	af00      	add	r7, sp, #0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	4611      	mov	r1, r2
 8000268:	461a      	mov	r2, r3
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	460b      	mov	r3, r1
 8000270:	71bb      	strb	r3, [r7, #6]
 8000272:	4613      	mov	r3, r2
 8000274:	717b      	strb	r3, [r7, #5]
	u8 Data_Received = 0;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]
	switch(Comms_Type){
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d80d      	bhi.n	800029c <Comms_Read_Write+0x3e>
	case USART_1:
	case USART_2:
	case USART_6:
		if(W_R){
 8000280:	797b      	ldrb	r3, [r7, #5]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d005      	beq.n	8000292 <Comms_Read_Write+0x34>
			MUSART_voidSendData(USART_Data, Len);
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	4619      	mov	r1, r3
 800028a:	6838      	ldr	r0, [r7, #0]
 800028c:	f001 fbf8 	bl	8001a80 <MUSART_voidSendData>
		}
		else{
			Data_Received = MUSART_u8ReadData();
		}
		break;
 8000290:	e005      	b.n	800029e <Comms_Read_Write+0x40>
			Data_Received = MUSART_u8ReadData();
 8000292:	f001 fc1b 	bl	8001acc <MUSART_u8ReadData>
 8000296:	4603      	mov	r3, r0
 8000298:	73fb      	strb	r3, [r7, #15]
		break;
 800029a:	e000      	b.n	800029e <Comms_Read_Write+0x40>
		break;
	case SPI_4:
		Data_Received = MSPI4_u8SendData(SPI_Data);
		break;*/
	default:
		break;
 800029c:	bf00      	nop
	}
	return	Data_Received;
 800029e:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <Comms_SetCallBack>:

void Comms_SetCallBack(Type_Comms Comms_Type, void(*Uptr)(void)){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	6039      	str	r1, [r7, #0]
 80002b2:	71fb      	strb	r3, [r7, #7]
	switch(Comms_Type){
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d10e      	bne.n	80002d8 <Comms_SetCallBack+0x30>
	case USART_1:
		MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 80002ba:	2005      	movs	r0, #5
 80002bc:	f001 fa0e 	bl	80016dc <MNVIC_vSetGroupMode>
		MNVIC_vSetInterruptPriority(37, 0, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	2025      	movs	r0, #37	; 0x25
 80002c6:	f001 fa25 	bl	8001714 <MNVIC_vSetInterruptPriority>
		MNVIC_vInterruptSetEnable(37);
 80002ca:	2025      	movs	r0, #37	; 0x25
 80002cc:	f001 f9e6 	bl	800169c <MNVIC_vInterruptSetEnable>
		MUSART_voidCallBack( Uptr);
 80002d0:	6838      	ldr	r0, [r7, #0]
 80002d2:	f001 fc33 	bl	8001b3c <MUSART_voidCallBack>
		break;
 80002d6:	e000      	b.n	80002da <Comms_SetCallBack+0x32>
		break;
	case SPI_4:
		MSPI4_voidSetCallBack(Uptr);
		break;*/
	default:
		break;
 80002d8:	bf00      	nop
	}
}
 80002da:	bf00      	nop
 80002dc:	3708      	adds	r7, #8
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

u8 KEYPAD_getPressedKey(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	b082      	sub	sp, #8
 80002e6:	af00      	add	r7, sp, #0
	u8 col,row;
	/************ Clock Initialization ****************/
	MRCC_vEnableClock(AHB1, RCC_GPIOB_EN);
 80002e8:	2101      	movs	r1, #1
 80002ea:	2000      	movs	r0, #0
 80002ec:	f001 fa8c 	bl	8001808 <MRCC_vEnableClock>
	MGPIO_voidSetPullType(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1,_PULL_UP);
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, _MODE_INPUT);
	MGPIO_voidSetPullType(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2,_PULL_UP);
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, _MODE_INPUT);
	MGPIO_voidSetPullType(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3,_PULL_UP);*/
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, _MODE_OUTPUT);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2105      	movs	r1, #5
 80002f4:	2001      	movs	r0, #1
 80002f6:	f000 fec5 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, _MODE_OUTPUT);
 80002fa:	2201      	movs	r2, #1
 80002fc:	2106      	movs	r1, #6
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fec0 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, _MODE_OUTPUT);
 8000304:	2201      	movs	r2, #1
 8000306:	2107      	movs	r1, #7
 8000308:	2001      	movs	r0, #1
 800030a:	f000 febb 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, _MODE_OUTPUT);
 800030e:	2201      	movs	r2, #1
 8000310:	2108      	movs	r1, #8
 8000312:	2001      	movs	r0, #1
 8000314:	f000 feb6 	bl	8001084 <MGPIO_voidSetPinMode>

	MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
 8000318:	2201      	movs	r2, #1
 800031a:	2105      	movs	r1, #5
 800031c:	2001      	movs	r0, #1
 800031e:	f001 f805 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
 8000322:	2201      	movs	r2, #1
 8000324:	2106      	movs	r1, #6
 8000326:	2001      	movs	r0, #1
 8000328:	f001 f800 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
 800032c:	2201      	movs	r2, #1
 800032e:	2107      	movs	r1, #7
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fffb 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
 8000336:	2201      	movs	r2, #1
 8000338:	2108      	movs	r1, #8
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fff6 	bl	800132c <MGPIO_voidWriteData>

	MGPIO_voidSetPinMode(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, _MODE_INPUT);
 8000340:	2200      	movs	r2, #0
 8000342:	210c      	movs	r1, #12
 8000344:	2001      	movs	r0, #1
 8000346:	f000 fe9d 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,_PULL_UP);
 800034a:	2201      	movs	r2, #1
 800034c:	210c      	movs	r1, #12
 800034e:	2001      	movs	r0, #1
 8000350:	f000 ff10 	bl	8001174 <MGPIO_voidSetPullType>
	MGPIO_voidSetPinMode(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, _MODE_INPUT);
 8000354:	2200      	movs	r2, #0
 8000356:	210d      	movs	r1, #13
 8000358:	2001      	movs	r0, #1
 800035a:	f000 fe93 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1,_PULL_UP);
 800035e:	2201      	movs	r2, #1
 8000360:	210d      	movs	r1, #13
 8000362:	2001      	movs	r0, #1
 8000364:	f000 ff06 	bl	8001174 <MGPIO_voidSetPullType>
	MGPIO_voidSetPinMode(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, _MODE_INPUT);
 8000368:	2200      	movs	r2, #0
 800036a:	210e      	movs	r1, #14
 800036c:	2001      	movs	r0, #1
 800036e:	f000 fe89 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2,_PULL_UP);
 8000372:	2201      	movs	r2, #1
 8000374:	210e      	movs	r1, #14
 8000376:	2001      	movs	r0, #1
 8000378:	f000 fefc 	bl	8001174 <MGPIO_voidSetPullType>
#if(KEYPAD_NUM_COLS == 4)
	MGPIO_voidSetPinMode(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, _MODE_INPUT);
 800037c:	2200      	movs	r2, #0
 800037e:	210f      	movs	r1, #15
 8000380:	2001      	movs	r0, #1
 8000382:	f000 fe7f 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3,_PULL_UP);
 8000386:	2201      	movs	r2, #1
 8000388:	210f      	movs	r1, #15
 800038a:	2001      	movs	r0, #1
 800038c:	f000 fef2 	bl	8001174 <MGPIO_voidSetPullType>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
 8000390:	2300      	movs	r3, #0
 8000392:	71bb      	strb	r3, [r7, #6]
 8000394:	e03a      	b.n	800040c <KEYPAD_getPressedKey+0x12a>
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */

			MGPIO_voidSetPinMode(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, _MODE_OUTPUT);
 8000396:	79bb      	ldrb	r3, [r7, #6]
 8000398:	3305      	adds	r3, #5
 800039a:	b2db      	uxtb	r3, r3
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	2001      	movs	r0, #1
 80003a2:	f000 fe6f 	bl	8001084 <MGPIO_voidSetPinMode>

			/* Set/Clear the row output pin */
			MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	3305      	adds	r3, #5
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2200      	movs	r2, #0
 80003ae:	4619      	mov	r1, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	f000 ffbb 	bl	800132c <MGPIO_voidWriteData>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	e019      	b.n	80003f0 <KEYPAD_getPressedKey+0x10e>
			{
				/* Check if the switch is pressed in this column */
				if(MGPIO_u8ReadData(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	330c      	adds	r3, #12
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	4619      	mov	r1, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	f000 ff45 	bl	8001254 <MGPIO_u8ReadData>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d10c      	bne.n	80003ea <KEYPAD_getPressedKey+0x108>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	79fb      	ldrb	r3, [r7, #7]
 80003d8:	4413      	add	r3, r2
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3301      	adds	r3, #1
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f81b 	bl	800041c <KEYPAD_4x4_adjustKeyNumber>
 80003e6:	4603      	mov	r3, r0
 80003e8:	e014      	b.n	8000414 <KEYPAD_getPressedKey+0x132>
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	3301      	adds	r3, #1
 80003ee:	71fb      	strb	r3, [r7, #7]
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9e2      	bls.n	80003bc <KEYPAD_getPressedKey+0xda>
#endif
#endif
				}
			}
			MGPIO_voidWriteData(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
 80003f6:	79bb      	ldrb	r3, [r7, #6]
 80003f8:	3305      	adds	r3, #5
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2201      	movs	r2, #1
 80003fe:	4619      	mov	r1, r3
 8000400:	2001      	movs	r0, #1
 8000402:	f000 ff93 	bl	800132c <MGPIO_voidWriteData>
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
 8000406:	79bb      	ldrb	r3, [r7, #6]
 8000408:	3301      	adds	r3, #1
 800040a:	71bb      	strb	r3, [r7, #6]
 800040c:	79bb      	ldrb	r3, [r7, #6]
 800040e:	2b03      	cmp	r3, #3
 8000410:	d9c1      	bls.n	8000396 <KEYPAD_getPressedKey+0xb4>
 8000412:	e7bd      	b.n	8000390 <KEYPAD_getPressedKey+0xae>
		}
	}	
}
 8000414:	4618      	mov	r0, r3
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	u8 keypad_button = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
	switch(button_number)
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	3b01      	subs	r3, #1
 800042e:	2b0f      	cmp	r3, #15
 8000430:	d852      	bhi.n	80004d8 <KEYPAD_4x4_adjustKeyNumber+0xbc>
 8000432:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <KEYPAD_4x4_adjustKeyNumber+0x1c>)
 8000434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000438:	08000479 	.word	0x08000479
 800043c:	0800047f 	.word	0x0800047f
 8000440:	08000485 	.word	0x08000485
 8000444:	0800048b 	.word	0x0800048b
 8000448:	08000491 	.word	0x08000491
 800044c:	08000497 	.word	0x08000497
 8000450:	0800049d 	.word	0x0800049d
 8000454:	080004a3 	.word	0x080004a3
 8000458:	080004a9 	.word	0x080004a9
 800045c:	080004af 	.word	0x080004af
 8000460:	080004b5 	.word	0x080004b5
 8000464:	080004bb 	.word	0x080004bb
 8000468:	080004c1 	.word	0x080004c1
 800046c:	080004c7 	.word	0x080004c7
 8000470:	080004cd 	.word	0x080004cd
 8000474:	080004d3 	.word	0x080004d3
	{
	case 1: keypad_button = 7;
 8000478:	2307      	movs	r3, #7
 800047a:	73fb      	strb	r3, [r7, #15]
	break;
 800047c:	e02f      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 2: keypad_button = 8;
 800047e:	2308      	movs	r3, #8
 8000480:	73fb      	strb	r3, [r7, #15]
	break;
 8000482:	e02c      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 3: keypad_button = 9;
 8000484:	2309      	movs	r3, #9
 8000486:	73fb      	strb	r3, [r7, #15]
	break;
 8000488:	e029      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 4: keypad_button = '%'; // ASCII Code of %
 800048a:	2325      	movs	r3, #37	; 0x25
 800048c:	73fb      	strb	r3, [r7, #15]
	break;
 800048e:	e026      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 5: keypad_button = 4;
 8000490:	2304      	movs	r3, #4
 8000492:	73fb      	strb	r3, [r7, #15]
	break;
 8000494:	e023      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 6: keypad_button = 5;
 8000496:	2305      	movs	r3, #5
 8000498:	73fb      	strb	r3, [r7, #15]
	break;
 800049a:	e020      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 7: keypad_button = 6;
 800049c:	2306      	movs	r3, #6
 800049e:	73fb      	strb	r3, [r7, #15]
	break;
 80004a0:	e01d      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
 80004a2:	232a      	movs	r3, #42	; 0x2a
 80004a4:	73fb      	strb	r3, [r7, #15]
	break;
 80004a6:	e01a      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 9: keypad_button = 1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	73fb      	strb	r3, [r7, #15]
	break;
 80004ac:	e017      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 10: keypad_button = 2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	73fb      	strb	r3, [r7, #15]
	break;
 80004b2:	e014      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 11: keypad_button = 3;
 80004b4:	2303      	movs	r3, #3
 80004b6:	73fb      	strb	r3, [r7, #15]
	break;
 80004b8:	e011      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
 80004ba:	232d      	movs	r3, #45	; 0x2d
 80004bc:	73fb      	strb	r3, [r7, #15]
	break;
 80004be:	e00e      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 13: keypad_button = 13;  /* ASCII of Enter */
 80004c0:	230d      	movs	r3, #13
 80004c2:	73fb      	strb	r3, [r7, #15]
	break;
 80004c4:	e00b      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 14: keypad_button = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73fb      	strb	r3, [r7, #15]
	break;
 80004ca:	e008      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 15: keypad_button = '='; /* ASCII Code of '=' */
 80004cc:	233d      	movs	r3, #61	; 0x3d
 80004ce:	73fb      	strb	r3, [r7, #15]
	break;
 80004d0:	e005      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
 80004d2:	232b      	movs	r3, #43	; 0x2b
 80004d4:	73fb      	strb	r3, [r7, #15]
	break;
 80004d6:	e002      	b.n	80004de <KEYPAD_4x4_adjustKeyNumber+0xc2>
	default: keypad_button = button_number;
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	73fb      	strb	r3, [r7, #15]
	break;
 80004dc:	bf00      	nop
	}
	return keypad_button;
 80004de:	7bfb      	ldrb	r3, [r7, #15]
} 
 80004e0:	4618      	mov	r0, r3
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/************ Clock Initialization ****************/
	MRCC_vEnableClock(AHB1, RCC_GPIOA_EN);
 80004f0:	2100      	movs	r1, #0
 80004f2:	2000      	movs	r0, #0
 80004f4:	f001 f988 	bl	8001808 <MRCC_vEnableClock>

	/* Configure the direction for RS and E pins as output pins */
	MGPIO_voidSetPinMode(LCD_RS_PORT_ID, LCD_RS_PIN_ID, _MODE_OUTPUT);
 80004f8:	2201      	movs	r2, #1
 80004fa:	210b      	movs	r1, #11
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fdc1 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_E_PORT_ID, LCD_E_PIN_ID, _MODE_OUTPUT);
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	2000      	movs	r0, #0
 8000508:	f000 fdbc 	bl	8001084 <MGPIO_voidSetPinMode>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */
 800050c:	2014      	movs	r0, #20
 800050e:	f000 fa2b 	bl	8000968 <_delay_ms>

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	MGPIO_voidSetPinMode(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, _MODE_OUTPUT  );
 8000512:	2201      	movs	r2, #1
 8000514:	2104      	movs	r1, #4
 8000516:	2000      	movs	r0, #0
 8000518:	f000 fdb4 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, _MODE_OUTPUT  );
 800051c:	2201      	movs	r2, #1
 800051e:	2105      	movs	r1, #5
 8000520:	2000      	movs	r0, #0
 8000522:	f000 fdaf 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, _MODE_OUTPUT  );
 8000526:	2201      	movs	r2, #1
 8000528:	2106      	movs	r1, #6
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fdaa 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, _MODE_OUTPUT  );
 8000530:	2201      	movs	r2, #1
 8000532:	2107      	movs	r1, #7
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fda5 	bl	8001084 <MGPIO_voidSetPinMode>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
 800053a:	2033      	movs	r0, #51	; 0x33
 800053c:	f000 f80e 	bl	800055c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
 8000540:	2032      	movs	r0, #50	; 0x32
 8000542:	f000 f80b 	bl	800055c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 8000546:	2028      	movs	r0, #40	; 0x28
 8000548:	f000 f808 	bl	800055c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 800054c:	200c      	movs	r0, #12
 800054e:	f000 f805 	bl	800055c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 8000552:	2001      	movs	r0, #1
 8000554:	f000 f802 	bl	800055c <LCD_sendCommand>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(u8 command)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidWriteData(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOW);		/* Instruction Mode RS=0 */
 8000566:	2200      	movs	r2, #0
 8000568:	210b      	movs	r1, #11
 800056a:	2000      	movs	r0, #0
 800056c:	f000 fede 	bl	800132c <MGPIO_voidWriteData>

	_delay_ms(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f000 f9f9 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, HIGH);			/* Enable LCD E=1 */
 8000576:	2201      	movs	r2, #1
 8000578:	2108      	movs	r1, #8
 800057a:	2000      	movs	r0, #0
 800057c:	f000 fed6 	bl	800132c <MGPIO_voidWriteData>

	_delay_ms(1);
 8000580:	2001      	movs	r0, #1
 8000582:	f000 f9f1 	bl	8000968 <_delay_ms>

#if(LCD_DATA_BITS_MODE == 4)
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,4));
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	091b      	lsrs	r3, r3, #4
 800058a:	b2db      	uxtb	r3, r3
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	b2db      	uxtb	r3, r3
 8000592:	461a      	mov	r2, r3
 8000594:	2104      	movs	r1, #4
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fec8 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,5));
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	095b      	lsrs	r3, r3, #5
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	2105      	movs	r1, #5
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 febd 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,6));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	099b      	lsrs	r3, r3, #6
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	2106      	movs	r1, #6
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 feb2 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,7));
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	09db      	lsrs	r3, r3, #7
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	461a      	mov	r2, r3
 80005d0:	2107      	movs	r1, #7
 80005d2:	2000      	movs	r0, #0
 80005d4:	f000 feaa 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f9c5 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fea2 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 f9bd 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, HIGH);			/* Enable LCD E=1 */
 80005ee:	2201      	movs	r2, #1
 80005f0:	2108      	movs	r1, #8
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 fe9a 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f9b5 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(command,0));
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	2104      	movs	r1, #4
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fe8e 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(command,1));
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	085b      	lsrs	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	2105      	movs	r1, #5
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fe83 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command,2));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 0301 	and.w	r3, r3, #1
 8000630:	b2db      	uxtb	r3, r3
 8000632:	461a      	mov	r2, r3
 8000634:	2106      	movs	r1, #6
 8000636:	2000      	movs	r0, #0
 8000638:	f000 fe78 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command,3));
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	2107      	movs	r1, #7
 800064c:	2000      	movs	r0, #0
 800064e:	f000 fe6d 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f000 f988 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
 8000658:	2200      	movs	r2, #0
 800065a:	2108      	movs	r1, #8
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fe65 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f980 	bl	8000968 <_delay_ms>
	_delay_ms(1);

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
	_delay_ms(1);
#endif
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(u8 data)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidWriteData(LCD_RS_PORT_ID, LCD_RS_PIN_ID ,HIGH); 		/* Data Mode RS=1 */
 800067a:	2201      	movs	r2, #1
 800067c:	210b      	movs	r1, #11
 800067e:	2000      	movs	r0, #0
 8000680:	f000 fe54 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f000 f96f 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, HIGH); 		/* Enable LCD E=1 */
 800068a:	2201      	movs	r2, #1
 800068c:	2108      	movs	r1, #8
 800068e:	2000      	movs	r0, #0
 8000690:	f000 fe4c 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f967 	bl	8000968 <_delay_ms>

#if(LCD_DATA_BITS_MODE == 4)

	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,4));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	091b      	lsrs	r3, r3, #4
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	2104      	movs	r1, #4
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 fe3e 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,5));
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	2105      	movs	r1, #5
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 fe33 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,6));
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	099b      	lsrs	r3, r3, #6
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	461a      	mov	r2, r3
 80006d4:	2106      	movs	r1, #6
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fe28 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,7));
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	09db      	lsrs	r3, r3, #7
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2107      	movs	r1, #7
 80006e6:	2000      	movs	r0, #0
 80006e8:	f000 fe20 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 f93b 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 fe18 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 f933 	bl	8000968 <_delay_ms>
	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, HIGH); 		/* Enable LCD E=1 */
 8000702:	2201      	movs	r2, #1
 8000704:	2108      	movs	r1, #8
 8000706:	2000      	movs	r0, #0
 8000708:	f000 fe10 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 800070c:	2001      	movs	r0, #1
 800070e:	f000 f92b 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, GET_BIT(data,0));
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	2104      	movs	r1, #4
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fe04 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, GET_BIT(data,1));
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	2105      	movs	r1, #5
 8000734:	2000      	movs	r0, #0
 8000736:	f000 fdf9 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data,2));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	089b      	lsrs	r3, r3, #2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	2106      	movs	r1, #6
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fdee 	bl	800132c <MGPIO_voidWriteData>
	MGPIO_voidWriteData(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data,3));
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	2107      	movs	r1, #7
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fde3 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 f8fe 	bl	8000968 <_delay_ms>

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fddb 	bl	800132c <MGPIO_voidWriteData>
	_delay_ms(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 f8f6 	bl	8000968 <_delay_ms>
	_delay_ms(1);

	MGPIO_voidWriteData(LCD_E_PORT_ID, LCD_E_PIN_ID, LOW); 			/* Disable LCD E=0 */
	_delay_ms(1);
#endif
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const s8 *Str)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	u8 i = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
	while(Str[i] != '\0')
 8000790:	e009      	b.n	80007a6 <LCD_displayString+0x22>
	{
		LCD_displayCharacter(Str[i]);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff68 	bl	8000670 <LCD_displayCharacter>
		i++;
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	3301      	adds	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	while(Str[i] != '\0')
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ef      	bne.n	8000792 <LCD_displayString+0xe>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(u8 row, u8 col)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	460a      	mov	r2, r1
 80007c6:	71fb      	strb	r3, [r7, #7]
 80007c8:	4613      	mov	r3, r2
 80007ca:	71bb      	strb	r3, [r7, #6]
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d819      	bhi.n	8000806 <LCD_moveCursor+0x4a>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <LCD_moveCursor+0x1c>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	080007ef 	.word	0x080007ef
 80007e0:	080007f7 	.word	0x080007f7
 80007e4:	080007ff 	.word	0x080007ff
	{
	case 0:
		lcd_memory_address=col;
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	73fb      	strb	r3, [r7, #15]
		break;
 80007ec:	e00b      	b.n	8000806 <LCD_moveCursor+0x4a>
	case 1:
		lcd_memory_address=col+0x40;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	3340      	adds	r3, #64	; 0x40
 80007f2:	73fb      	strb	r3, [r7, #15]
		break;
 80007f4:	e007      	b.n	8000806 <LCD_moveCursor+0x4a>
	case 2:
		lcd_memory_address=col+0x10;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	3310      	adds	r3, #16
 80007fa:	73fb      	strb	r3, [r7, #15]
		break;
 80007fc:	e003      	b.n	8000806 <LCD_moveCursor+0x4a>
	case 3:
		lcd_memory_address=col+0x50;
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	3350      	adds	r3, #80	; 0x50
 8000802:	73fb      	strb	r3, [r7, #15]
		break;
 8000804:	bf00      	nop
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fea4 	bl	800055c <LCD_sendCommand>
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(u8 row,u8 col,const s8 *Str)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	603a      	str	r2, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	460b      	mov	r3, r1
 800082a:	71bb      	strb	r3, [r7, #6]
	LCD_moveCursor(row , col); /* go to to the required LCD position */
 800082c:	79ba      	ldrb	r2, [r7, #6]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffc2 	bl	80007bc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
 8000838:	6838      	ldr	r0, [r7, #0]
 800083a:	f7ff ffa3 	bl	8000784 <LCD_displayString>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(s32 data)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b086      	sub	sp, #24
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	s8 buff[16]; /* String to hold the ascii result */
	itoa(data , buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value*/
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	220a      	movs	r2, #10
 8000854:	4619      	mov	r1, r3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f001 fbd7 	bl	800200a <itoa>
	LCD_displayString(buff); /* Display the string */
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ff8f 	bl	8000784 <LCD_displayString>
}
 8000866:	bf00      	nop
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff fe72 	bl	800055c <LCD_sendCommand>
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}

0800087c <PB_InterruptInit>:
	MRCC_vEnableClock(AHB1, PORT);
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
	MGPIO_voidSetPullType(PORT, PIN, PULL);
}

void PB_InterruptInit(u8 PORT, u8 PIN, u8 PULL, u8 TRIGGER, void (*PB_ptr)(void), u8 IntGroup_ID, u8 IntPriority_ID){
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4604      	mov	r4, r0
 8000884:	4608      	mov	r0, r1
 8000886:	4611      	mov	r1, r2
 8000888:	461a      	mov	r2, r3
 800088a:	4623      	mov	r3, r4
 800088c:	71fb      	strb	r3, [r7, #7]
 800088e:	4603      	mov	r3, r0
 8000890:	71bb      	strb	r3, [r7, #6]
 8000892:	460b      	mov	r3, r1
 8000894:	717b      	strb	r3, [r7, #5]
 8000896:	4613      	mov	r3, r2
 8000898:	713b      	strb	r3, [r7, #4]
	MRCC_vEnableClock(AHB1, PORT);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4619      	mov	r1, r3
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 ffb2 	bl	8001808 <MRCC_vEnableClock>
	MRCC_vEnableClock(APB2, RCC_SYSCFG_EN);
 80008a4:	210e      	movs	r1, #14
 80008a6:	2003      	movs	r0, #3
 80008a8:	f000 ffae 	bl	8001808 <MRCC_vEnableClock>
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
 80008ac:	79b9      	ldrb	r1, [r7, #6]
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2200      	movs	r2, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 fbe6 	bl	8001084 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(PORT, PIN, PULL);
 80008b8:	79b9      	ldrb	r1, [r7, #6]
 80008ba:	797a      	ldrb	r2, [r7, #5]
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 fc58 	bl	8001174 <MGPIO_voidSetPullType>
	MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 80008c4:	2005      	movs	r0, #5
 80008c6:	f000 ff09 	bl	80016dc <MNVIC_vSetGroupMode>
	if(PIN < 5){
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d80f      	bhi.n	80008f0 <PB_InterruptInit+0x74>
		MNVIC_vInterruptSetEnable(PIN + 6);
 80008d0:	79bb      	ldrb	r3, [r7, #6]
 80008d2:	3306      	adds	r3, #6
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f000 fee0 	bl	800169c <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(PIN + 6, IntGroup_ID, IntPriority_ID);
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	3306      	adds	r3, #6
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008e6:	7f39      	ldrb	r1, [r7, #28]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 ff13 	bl	8001714 <MNVIC_vSetInterruptPriority>
 80008ee:	e01a      	b.n	8000926 <PB_InterruptInit+0xaa>
	}
	else if(PIN < 10){
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	2b09      	cmp	r3, #9
 80008f4:	d80a      	bhi.n	800090c <PB_InterruptInit+0x90>
		/* EXTI5-9 are at Position 23*/
		MNVIC_vInterruptSetEnable(23);
 80008f6:	2017      	movs	r0, #23
 80008f8:	f000 fed0 	bl	800169c <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(23, IntGroup_ID, IntPriority_ID);
 80008fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000900:	7f3b      	ldrb	r3, [r7, #28]
 8000902:	4619      	mov	r1, r3
 8000904:	2017      	movs	r0, #23
 8000906:	f000 ff05 	bl	8001714 <MNVIC_vSetInterruptPriority>
 800090a:	e00c      	b.n	8000926 <PB_InterruptInit+0xaa>
	}
	else if (PIN < 16){
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	2b0f      	cmp	r3, #15
 8000910:	d809      	bhi.n	8000926 <PB_InterruptInit+0xaa>
		/* EXTI10-15 are at Position 40*/
		MNVIC_vInterruptSetEnable(40);
 8000912:	2028      	movs	r0, #40	; 0x28
 8000914:	f000 fec2 	bl	800169c <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(40, IntGroup_ID, IntPriority_ID);
 8000918:	f897 2020 	ldrb.w	r2, [r7, #32]
 800091c:	7f3b      	ldrb	r3, [r7, #28]
 800091e:	4619      	mov	r1, r3
 8000920:	2028      	movs	r0, #40	; 0x28
 8000922:	f000 fef7 	bl	8001714 <MNVIC_vSetInterruptPriority>
	}
	MEXTI_vHWInterruptEnable(PIN);
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f83d 	bl	80009a8 <MEXTI_vHWInterruptEnable>
	MEXTI_vSetTriggerType(PIN, TRIGGER);
 800092e:	793a      	ldrb	r2, [r7, #4]
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f84f 	bl	80009d8 <MEXTI_vSetTriggerType>
	MEXTI_vSetExtiConfig(PIN, ((PORT == _GPIOH_PORT)? PORT += 2 : PORT) );
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b05      	cmp	r3, #5
 800093e:	d104      	bne.n	800094a <PB_InterruptInit+0xce>
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	3302      	adds	r3, #2
 8000944:	71fb      	strb	r3, [r7, #7]
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	e000      	b.n	800094c <PB_InterruptInit+0xd0>
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	79ba      	ldrb	r2, [r7, #6]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f000 f887 	bl	8000a64 <MEXTI_vSetExtiConfig>
	MEXTI_vSetCallback(PIN, PB_ptr);
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	69b9      	ldr	r1, [r7, #24]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f9d2 	bl	8000d04 <MEXTI_vSetCallback>
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}

08000968 <_delay_ms>:
/* delay source file */
#include "delay.h"

/* delay n milliseconds (16 MHz CPU clock) */
void _delay_ms(u32 time){
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < time; i++){
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e00c      	b.n	8000990 <_delay_ms+0x28>
		for(u32 j = 0; j<2000; j++){
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	e002      	b.n	8000982 <_delay_ms+0x1a>
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	3301      	adds	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000988:	d3f8      	bcc.n	800097c <_delay_ms+0x14>
	for(u32 i = 0; i < time; i++){
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	3301      	adds	r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	d3ee      	bcc.n	8000976 <_delay_ms+0xe>
		}
	}
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <MEXTI_vHWInterruptEnable>:
/* 1- Function Description -> Function to Set the Interrupt mask on for the required Line              */
/* 2- Function Input       -> LINE                                                                     */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vHWInterruptEnable(EXTI_Line_x LINE){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI -> IMR , LINE);
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MEXTI_vHWInterruptEnable+0x2c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	2101      	movs	r1, #1
 80009ba:	fa01 f202 	lsl.w	r2, r1, r2
 80009be:	4611      	mov	r1, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <MEXTI_vHWInterruptEnable+0x2c>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6013      	str	r3, [r2, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40013c00 	.word	0x40013c00

080009d8 <MEXTI_vSetTriggerType>:
/* 1- Function Description -> Function to set the trigger type the interrupt/event will activate on    */
/* 2- Function Input       -> LINE, Trigger              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetTriggerType(EXTI_Line_x LINE, EXTI_Trigger Trigger){
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	4613      	mov	r3, r2
 80009e6:	71bb      	strb	r3, [r7, #6]
	switch (Trigger){
 80009e8:	79bb      	ldrb	r3, [r7, #6]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d01c      	beq.n	8000a28 <MEXTI_vSetTriggerType+0x50>
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	dc2f      	bgt.n	8000a52 <MEXTI_vSetTriggerType+0x7a>
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d002      	beq.n	80009fc <MEXTI_vSetTriggerType+0x24>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d00b      	beq.n	8000a12 <MEXTI_vSetTriggerType+0x3a>
	case Any_Change:
		SET_BIT(EXTI -> RSTR , LINE);
		SET_BIT(EXTI -> FSTR , LINE);
		break;
	default:
		break;
 80009fa:	e02a      	b.n	8000a52 <MEXTI_vSetTriggerType+0x7a>
		SET_BIT(EXTI -> RSTR , LINE);
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	2101      	movs	r1, #1
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6093      	str	r3, [r2, #8]
		break;
 8000a10:	e020      	b.n	8000a54 <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> FSTR , LINE);
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	2101      	movs	r1, #1
 8000a1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a22:	430b      	orrs	r3, r1
 8000a24:	60d3      	str	r3, [r2, #12]
		break;
 8000a26:	e015      	b.n	8000a54 <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> RSTR , LINE);
 8000a28:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f202 	lsl.w	r2, r1, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a38:	430b      	orrs	r3, r1
 8000a3a:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI -> FSTR , LINE);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	2101      	movs	r1, #1
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <MEXTI_vSetTriggerType+0x88>)
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	60d3      	str	r3, [r2, #12]
		break;
 8000a50:	e000      	b.n	8000a54 <MEXTI_vSetTriggerType+0x7c>
		break;
 8000a52:	bf00      	nop
	}
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40013c00 	.word	0x40013c00

08000a64 <MEXTI_vSetExtiConfig>:
/*                            system configuration                                                     */
/* 2- Function Input       -> LINE, PORT              											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetExtiConfig(EXTI_Line_x LINE, SYSCFG_Port PORT){
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	71bb      	strb	r3, [r7, #6]
	u8 CRx  = LINE / 4;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	73fb      	strb	r3, [r7, #15]
	u8 line = LINE % 4;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	73bb      	strb	r3, [r7, #14]
	switch (CRx) {
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	2b03      	cmp	r3, #3
 8000a86:	f200 8133 	bhi.w	8000cf0 <MEXTI_vSetExtiConfig+0x28c>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <MEXTI_vSetExtiConfig+0x2c>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000aa1 	.word	0x08000aa1
 8000a94:	08000b35 	.word	0x08000b35
 8000a98:	08000bc9 	.word	0x08000bc9
 8000a9c:	08000c5d 	.word	0x08000c5d
	case 0:
		switch (line){
 8000aa0:	7bbb      	ldrb	r3, [r7, #14]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d844      	bhi.n	8000b30 <MEXTI_vSetExtiConfig+0xcc>
 8000aa6:	a201      	add	r2, pc, #4	; (adr r2, 8000aac <MEXTI_vSetExtiConfig+0x48>)
 8000aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aac:	08000abd 	.word	0x08000abd
 8000ab0:	08000ad7 	.word	0x08000ad7
 8000ab4:	08000af5 	.word	0x08000af5
 8000ab8:	08000b13 	.word	0x08000b13
		case 0:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK1;
 8000abc:	4b90      	ldr	r3, [pc, #576]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a8f      	ldr	r2, [pc, #572]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ac2:	f023 030f 	bic.w	r3, r3, #15
 8000ac6:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= PORT;
 8000ac8:	4b8d      	ldr	r3, [pc, #564]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	79bb      	ldrb	r3, [r7, #6]
 8000ace:	498c      	ldr	r1, [pc, #560]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
			break;
 8000ad4:	e02d      	b.n	8000b32 <MEXTI_vSetExtiConfig+0xce>
		case 1:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK2;
 8000ad6:	4b8a      	ldr	r3, [pc, #552]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a89      	ldr	r2, [pc, #548]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000adc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ae0:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT <<4);
 8000ae2:	4b87      	ldr	r3, [pc, #540]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	4611      	mov	r1, r2
 8000aec:	4a84      	ldr	r2, [pc, #528]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000aee:	430b      	orrs	r3, r1
 8000af0:	6013      	str	r3, [r2, #0]
			break;
 8000af2:	e01e      	b.n	8000b32 <MEXTI_vSetExtiConfig+0xce>
		case 2:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK3;
 8000af4:	4b82      	ldr	r3, [pc, #520]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a81      	ldr	r2, [pc, #516]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000afa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000afe:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 8);
 8000b00:	4b7f      	ldr	r3, [pc, #508]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	0212      	lsls	r2, r2, #8
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a7d      	ldr	r2, [pc, #500]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	6013      	str	r3, [r2, #0]
			break;
 8000b10:	e00f      	b.n	8000b32 <MEXTI_vSetExtiConfig+0xce>
		case 3:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK4;
 8000b12:	4b7b      	ldr	r3, [pc, #492]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a7a      	ldr	r2, [pc, #488]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b1c:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 12);
 8000b1e:	4b78      	ldr	r3, [pc, #480]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	79ba      	ldrb	r2, [r7, #6]
 8000b24:	0312      	lsls	r2, r2, #12
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a75      	ldr	r2, [pc, #468]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6013      	str	r3, [r2, #0]
			break;
 8000b2e:	e000      	b.n	8000b32 <MEXTI_vSetExtiConfig+0xce>
		default:
			break;
 8000b30:	bf00      	nop
		}
		break;
 8000b32:	e0de      	b.n	8000cf2 <MEXTI_vSetExtiConfig+0x28e>
	case 1:
		switch (line){
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d844      	bhi.n	8000bc4 <MEXTI_vSetExtiConfig+0x160>
 8000b3a:	a201      	add	r2, pc, #4	; (adr r2, 8000b40 <MEXTI_vSetExtiConfig+0xdc>)
 8000b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b40:	08000b51 	.word	0x08000b51
 8000b44:	08000b6b 	.word	0x08000b6b
 8000b48:	08000b89 	.word	0x08000b89
 8000b4c:	08000ba7 	.word	0x08000ba7
		case 0:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK1;
 8000b50:	4b6b      	ldr	r3, [pc, #428]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	4a6a      	ldr	r2, [pc, #424]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b56:	f023 030f 	bic.w	r3, r3, #15
 8000b5a:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= PORT;
 8000b5c:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	4967      	ldr	r1, [pc, #412]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b64:	4313      	orrs	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
			break;
 8000b68:	e02d      	b.n	8000bc6 <MEXTI_vSetExtiConfig+0x162>
		case 1:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK2;
 8000b6a:	4b65      	ldr	r3, [pc, #404]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a64      	ldr	r2, [pc, #400]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b74:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT <<4);
 8000b76:	4b62      	ldr	r3, [pc, #392]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a5f      	ldr	r2, [pc, #380]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	6053      	str	r3, [r2, #4]
			break;
 8000b86:	e01e      	b.n	8000bc6 <MEXTI_vSetExtiConfig+0x162>
		case 2:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK3;
 8000b88:	4b5d      	ldr	r3, [pc, #372]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a5c      	ldr	r2, [pc, #368]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b92:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 8);
 8000b94:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	79ba      	ldrb	r2, [r7, #6]
 8000b9a:	0212      	lsls	r2, r2, #8
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4a58      	ldr	r2, [pc, #352]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6053      	str	r3, [r2, #4]
			break;
 8000ba4:	e00f      	b.n	8000bc6 <MEXTI_vSetExtiConfig+0x162>
		case 3:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK4;
 8000ba6:	4b56      	ldr	r3, [pc, #344]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4a55      	ldr	r2, [pc, #340]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000bb0:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 12);
 8000bb2:	4b53      	ldr	r3, [pc, #332]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	79ba      	ldrb	r2, [r7, #6]
 8000bb8:	0312      	lsls	r2, r2, #12
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a50      	ldr	r2, [pc, #320]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6053      	str	r3, [r2, #4]
			break;
 8000bc2:	e000      	b.n	8000bc6 <MEXTI_vSetExtiConfig+0x162>
		default:
			break;
 8000bc4:	bf00      	nop
		}
		break;
 8000bc6:	e094      	b.n	8000cf2 <MEXTI_vSetExtiConfig+0x28e>
	case 2:
		switch (line){
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d844      	bhi.n	8000c58 <MEXTI_vSetExtiConfig+0x1f4>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <MEXTI_vSetExtiConfig+0x170>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000bff 	.word	0x08000bff
 8000bdc:	08000c1d 	.word	0x08000c1d
 8000be0:	08000c3b 	.word	0x08000c3b
		case 0:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK1;
 8000be4:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	4a45      	ldr	r2, [pc, #276]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bea:	f023 030f 	bic.w	r3, r3, #15
 8000bee:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= PORT;
 8000bf0:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	79bb      	ldrb	r3, [r7, #6]
 8000bf6:	4942      	ldr	r1, [pc, #264]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	608b      	str	r3, [r1, #8]
			break;
 8000bfc:	e02d      	b.n	8000c5a <MEXTI_vSetExtiConfig+0x1f6>
		case 1:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK2;
 8000bfe:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	4a3f      	ldr	r2, [pc, #252]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c08:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT <<4);
 8000c0a:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	79ba      	ldrb	r2, [r7, #6]
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a3a      	ldr	r2, [pc, #232]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c16:	430b      	orrs	r3, r1
 8000c18:	6093      	str	r3, [r2, #8]
			break;
 8000c1a:	e01e      	b.n	8000c5a <MEXTI_vSetExtiConfig+0x1f6>
		case 2:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK3;
 8000c1c:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a37      	ldr	r2, [pc, #220]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c26:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 8);
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	79ba      	ldrb	r2, [r7, #6]
 8000c2e:	0212      	lsls	r2, r2, #8
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a33      	ldr	r2, [pc, #204]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6093      	str	r3, [r2, #8]
			break;
 8000c38:	e00f      	b.n	8000c5a <MEXTI_vSetExtiConfig+0x1f6>
		case 3:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK4;
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000c44:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 12);
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	79ba      	ldrb	r2, [r7, #6]
 8000c4c:	0312      	lsls	r2, r2, #12
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a2b      	ldr	r2, [pc, #172]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6093      	str	r3, [r2, #8]
			break;
 8000c56:	e000      	b.n	8000c5a <MEXTI_vSetExtiConfig+0x1f6>
		default:
			break;
 8000c58:	bf00      	nop
		}
		break;
 8000c5a:	e04a      	b.n	8000cf2 <MEXTI_vSetExtiConfig+0x28e>
	case 3:
		switch (line){
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d844      	bhi.n	8000cec <MEXTI_vSetExtiConfig+0x288>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <MEXTI_vSetExtiConfig+0x204>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000c93 	.word	0x08000c93
 8000c70:	08000cb1 	.word	0x08000cb1
 8000c74:	08000ccf 	.word	0x08000ccf
		case 0:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK1;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= PORT;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	79bb      	ldrb	r3, [r7, #6]
 8000c8a:	491d      	ldr	r1, [pc, #116]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60cb      	str	r3, [r1, #12]
			break;
 8000c90:	e02d      	b.n	8000cee <MEXTI_vSetExtiConfig+0x28a>
		case 1:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK2;
 8000c92:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c9c:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT <<4);
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	79ba      	ldrb	r2, [r7, #6]
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	60d3      	str	r3, [r2, #12]
			break;
 8000cae:	e01e      	b.n	8000cee <MEXTI_vSetExtiConfig+0x28a>
		case 2:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK3;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cba:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 8);
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	0212      	lsls	r2, r2, #8
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cc8:	430b      	orrs	r3, r1
 8000cca:	60d3      	str	r3, [r2, #12]
			break;
 8000ccc:	e00f      	b.n	8000cee <MEXTI_vSetExtiConfig+0x28a>
		case 3:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK4;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000cd8:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 12);
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	0312      	lsls	r2, r2, #12
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <MEXTI_vSetExtiConfig+0x29c>)
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	60d3      	str	r3, [r2, #12]
			break;
 8000cea:	e000      	b.n	8000cee <MEXTI_vSetExtiConfig+0x28a>
		default:
			break;
 8000cec:	bf00      	nop
		}
		break;
 8000cee:	e000      	b.n	8000cf2 <MEXTI_vSetExtiConfig+0x28e>
	default:
		break;
 8000cf0:	bf00      	nop
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40013808 	.word	0x40013808

08000d04 <MEXTI_vSetCallback>:
/* 1- Function Description -> Function to set the callback function to the line it will correspond to  */
/* 2- Function Input       -> LINE, *ptr()              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetCallback(EXTI_Line_x LINE, void(*ptr)(void)){
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
	switch (LINE) {
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	d862      	bhi.n	8000ddc <MEXTI_vSetCallback+0xd8>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <MEXTI_vSetCallback+0x18>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d5d 	.word	0x08000d5d
 8000d20:	08000d65 	.word	0x08000d65
 8000d24:	08000d6d 	.word	0x08000d6d
 8000d28:	08000d75 	.word	0x08000d75
 8000d2c:	08000d7d 	.word	0x08000d7d
 8000d30:	08000d85 	.word	0x08000d85
 8000d34:	08000d8d 	.word	0x08000d8d
 8000d38:	08000d95 	.word	0x08000d95
 8000d3c:	08000d9d 	.word	0x08000d9d
 8000d40:	08000da5 	.word	0x08000da5
 8000d44:	08000dad 	.word	0x08000dad
 8000d48:	08000db5 	.word	0x08000db5
 8000d4c:	08000dbd 	.word	0x08000dbd
 8000d50:	08000dc5 	.word	0x08000dc5
 8000d54:	08000dcd 	.word	0x08000dcd
 8000d58:	08000dd5 	.word	0x08000dd5
	case EXTI_Line_0:
		EXTI0_Callback =ptr;
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MEXTI_vSetCallback+0xe8>)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	6013      	str	r3, [r2, #0]
		break;
 8000d62:	e03c      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_1:
		EXTI1_Callback =ptr;
 8000d64:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <MEXTI_vSetCallback+0xec>)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	6013      	str	r3, [r2, #0]
		break;
 8000d6a:	e038      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_2:
		EXTI2_Callback =ptr;
 8000d6c:	4a21      	ldr	r2, [pc, #132]	; (8000df4 <MEXTI_vSetCallback+0xf0>)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	6013      	str	r3, [r2, #0]
		break;
 8000d72:	e034      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_3:
		EXTI3_Callback =ptr;
 8000d74:	4a20      	ldr	r2, [pc, #128]	; (8000df8 <MEXTI_vSetCallback+0xf4>)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	6013      	str	r3, [r2, #0]
		break;
 8000d7a:	e030      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_4:
		EXTI4_Callback =ptr;
 8000d7c:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <MEXTI_vSetCallback+0xf8>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	6013      	str	r3, [r2, #0]
		break;
 8000d82:	e02c      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_5:
		EXTI5_Callback =ptr;
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <MEXTI_vSetCallback+0xfc>)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	6013      	str	r3, [r2, #0]
		break;
 8000d8a:	e028      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_6:
		EXTI6_Callback =ptr;
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <MEXTI_vSetCallback+0x100>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	6013      	str	r3, [r2, #0]
		break;
 8000d92:	e024      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_7:
		EXTI7_Callback =ptr;
 8000d94:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <MEXTI_vSetCallback+0x104>)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6013      	str	r3, [r2, #0]
		break;
 8000d9a:	e020      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_8:
		EXTI8_Callback =ptr;
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <MEXTI_vSetCallback+0x108>)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6013      	str	r3, [r2, #0]
		break;
 8000da2:	e01c      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_9:
		EXTI9_Callback =ptr;
 8000da4:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <MEXTI_vSetCallback+0x10c>)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	6013      	str	r3, [r2, #0]
		break;
 8000daa:	e018      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_10:
		EXTI10_Callback =ptr;
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <MEXTI_vSetCallback+0x110>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6013      	str	r3, [r2, #0]
		break;
 8000db2:	e014      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_11:
		EXTI11_Callback =ptr;
 8000db4:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <MEXTI_vSetCallback+0x114>)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6013      	str	r3, [r2, #0]
		break;
 8000dba:	e010      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_12:
		EXTI12_Callback =ptr;
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <MEXTI_vSetCallback+0x118>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	6013      	str	r3, [r2, #0]
		break;
 8000dc2:	e00c      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_13:
		EXTI13_Callback =ptr;
 8000dc4:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <MEXTI_vSetCallback+0x11c>)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	6013      	str	r3, [r2, #0]
		break;
 8000dca:	e008      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_14:
		EXTI14_Callback =ptr;
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <MEXTI_vSetCallback+0x120>)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	6013      	str	r3, [r2, #0]
		break;
 8000dd2:	e004      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	case EXTI_Line_15:
		EXTI15_Callback =ptr;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <MEXTI_vSetCallback+0x124>)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	6013      	str	r3, [r2, #0]
		break;
 8000dda:	e000      	b.n	8000dde <MEXTI_vSetCallback+0xda>
	default:
		break;
 8000ddc:	bf00      	nop
	}
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000020 	.word	0x20000020
 8000df0:	20000024 	.word	0x20000024
 8000df4:	20000028 	.word	0x20000028
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	20000030 	.word	0x20000030
 8000e00:	20000034 	.word	0x20000034
 8000e04:	20000038 	.word	0x20000038
 8000e08:	2000003c 	.word	0x2000003c
 8000e0c:	20000040 	.word	0x20000040
 8000e10:	20000044 	.word	0x20000044
 8000e14:	20000048 	.word	0x20000048
 8000e18:	2000004c 	.word	0x2000004c
 8000e1c:	20000050 	.word	0x20000050
 8000e20:	20000054 	.word	0x20000054
 8000e24:	20000058 	.word	0x20000058
 8000e28:	2000005c 	.word	0x2000005c

08000e2c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	EXTI0_Callback();
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <EXTI0_IRQHandler+0x1c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_0);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <EXTI0_IRQHandler+0x20>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <EXTI0_IRQHandler+0x20>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6153      	str	r3, [r2, #20]
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	40013c00 	.word	0x40013c00

08000e50 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	EXTI1_Callback();
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <EXTI1_IRQHandler+0x1c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_1);
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <EXTI1_IRQHandler+0x20>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <EXTI1_IRQHandler+0x20>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6153      	str	r3, [r2, #20]
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000024 	.word	0x20000024
 8000e70:	40013c00 	.word	0x40013c00

08000e74 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	EXTI2_Callback();
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <EXTI2_IRQHandler+0x1c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_2);
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <EXTI2_IRQHandler+0x20>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <EXTI2_IRQHandler+0x20>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6153      	str	r3, [r2, #20]
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000028 	.word	0x20000028
 8000e94:	40013c00 	.word	0x40013c00

08000e98 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	EXTI3_Callback();
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <EXTI3_IRQHandler+0x1c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_3);
 8000ea2:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <EXTI3_IRQHandler+0x20>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <EXTI3_IRQHandler+0x20>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	6153      	str	r3, [r2, #20]
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000002c 	.word	0x2000002c
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	EXTI4_Callback();
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <EXTI4_IRQHandler+0x1c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_4);
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <EXTI4_IRQHandler+0x20>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <EXTI4_IRQHandler+0x20>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	6153      	str	r3, [r2, #20]
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000030 	.word	0x20000030
 8000edc:	40013c00 	.word	0x40013c00

08000ee0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI -> PR, EXTI_Line_5)){
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f003 0320 	and.w	r3, r3, #32
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <EXTI9_5_IRQHandler+0x24>
		EXTI5_Callback();
 8000ef0:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <EXTI9_5_IRQHandler+0xac>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_5);
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6153      	str	r3, [r2, #20]
	}
	else if(GET_BIT(EXTI -> PR, EXTI_Line_9)){
		EXTI9_Callback();
		SET_BIT(EXTI -> PR, EXTI_Line_9);
	}
}
 8000f02:	e03e      	b.n	8000f82 <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_6)){
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <EXTI9_5_IRQHandler+0x44>
		EXTI6_Callback();
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <EXTI9_5_IRQHandler+0xb0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_6);
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f20:	6153      	str	r3, [r2, #20]
}
 8000f22:	e02e      	b.n	8000f82 <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_7)){
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <EXTI9_5_IRQHandler+0x64>
		EXTI7_Callback();
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <EXTI9_5_IRQHandler+0xb4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_7);
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6153      	str	r3, [r2, #20]
}
 8000f42:	e01e      	b.n	8000f82 <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_8)){
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d009      	beq.n	8000f64 <EXTI9_5_IRQHandler+0x84>
		EXTI8_Callback();
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <EXTI9_5_IRQHandler+0xb8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_8);
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	6153      	str	r3, [r2, #20]
}
 8000f62:	e00e      	b.n	8000f82 <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_9)){
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <EXTI9_5_IRQHandler+0xa2>
		EXTI9_Callback();
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <EXTI9_5_IRQHandler+0xbc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_9);
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <EXTI9_5_IRQHandler+0xa8>)
 8000f7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f80:	6153      	str	r3, [r2, #20]
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40013c00 	.word	0x40013c00
 8000f8c:	20000034 	.word	0x20000034
 8000f90:	20000038 	.word	0x20000038
 8000f94:	2000003c 	.word	0x2000003c
 8000f98:	20000040 	.word	0x20000040
 8000f9c:	20000044 	.word	0x20000044

08000fa0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI -> PR, EXTI_Line_10)){
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d009      	beq.n	8000fc4 <EXTI15_10_IRQHandler+0x24>
		EXTI10_Callback();
 8000fb0:	4b2e      	ldr	r3, [pc, #184]	; (800106c <EXTI15_10_IRQHandler+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_10);
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc0:	6153      	str	r3, [r2, #20]
	}
	else if(GET_BIT(EXTI -> PR, EXTI_Line_15)){
		EXTI15_Callback();
		SET_BIT(EXTI -> PR, EXTI_Line_15);
	}
}
 8000fc2:	e04e      	b.n	8001062 <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_11)){
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fc6:	695b      	ldr	r3, [r3, #20]
 8000fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d009      	beq.n	8000fe4 <EXTI15_10_IRQHandler+0x44>
		EXTI11_Callback();
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <EXTI15_10_IRQHandler+0xd0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_11);
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe0:	6153      	str	r3, [r2, #20]
}
 8000fe2:	e03e      	b.n	8001062 <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_12)){
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d009      	beq.n	8001004 <EXTI15_10_IRQHandler+0x64>
		EXTI12_Callback();
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <EXTI15_10_IRQHandler+0xd4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_12);
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8000ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001000:	6153      	str	r3, [r2, #20]
}
 8001002:	e02e      	b.n	8001062 <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_13)){
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d009      	beq.n	8001024 <EXTI15_10_IRQHandler+0x84>
		EXTI13_Callback();
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <EXTI15_10_IRQHandler+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_13);
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 800101c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001020:	6153      	str	r3, [r2, #20]
}
 8001022:	e01e      	b.n	8001062 <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_14)){
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <EXTI15_10_IRQHandler+0xa4>
		EXTI14_Callback();
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <EXTI15_10_IRQHandler+0xdc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_14);
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6153      	str	r3, [r2, #20]
}
 8001042:	e00e      	b.n	8001062 <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_15)){
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <EXTI15_10_IRQHandler+0xc2>
		EXTI15_Callback();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <EXTI15_10_IRQHandler+0xe0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_15);
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a03      	ldr	r2, [pc, #12]	; (8001068 <EXTI15_10_IRQHandler+0xc8>)
 800105c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001060:	6153      	str	r3, [r2, #20]
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40013c00 	.word	0x40013c00
 800106c:	20000048 	.word	0x20000048
 8001070:	2000004c 	.word	0x2000004c
 8001074:	20000050 	.word	0x20000050
 8001078:	20000054 	.word	0x20000054
 800107c:	20000058 	.word	0x20000058
 8001080:	2000005c 	.word	0x2000005c

08001084 <MGPIO_voidSetPinMode>:
/*      4- MODE_ANALOG                                                                                 */
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	460b      	mov	r3, r1
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	4613      	mov	r3, r2
 8001094:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d857      	bhi.n	800114c <MGPIO_voidSetPinMode+0xc8>
 800109c:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <MGPIO_voidSetPinMode+0x20>)
 800109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a2:	bf00      	nop
 80010a4:	080010bd 	.word	0x080010bd
 80010a8:	080010d5 	.word	0x080010d5
 80010ac:	080010ed 	.word	0x080010ed
 80010b0:	08001105 	.word	0x08001105
 80010b4:	0800111d 	.word	0x0800111d
 80010b8:	08001135 	.word	0x08001135
	{
	  case _GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <MGPIO_voidSetPinMode+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	7979      	ldrb	r1, [r7, #5]
 80010c2:	79ba      	ldrb	r2, [r7, #6]
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	4611      	mov	r1, r2
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <MGPIO_voidSetPinMode+0xd8>)
 80010ce:	430b      	orrs	r3, r1
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e03c      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <MGPIO_voidSetPinMode+0xdc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	7979      	ldrb	r1, [r7, #5]
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	0052      	lsls	r2, r2, #1
 80010de:	fa01 f202 	lsl.w	r2, r1, r2
 80010e2:	4611      	mov	r1, r2
 80010e4:	4a1e      	ldr	r2, [pc, #120]	; (8001160 <MGPIO_voidSetPinMode+0xdc>)
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e030      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MGPIO_voidSetPinMode+0xe0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	7979      	ldrb	r1, [r7, #5]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	0052      	lsls	r2, r2, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	4611      	mov	r1, r2
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <MGPIO_voidSetPinMode+0xe0>)
 80010fe:	430b      	orrs	r3, r1
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e024      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MGPIO_voidSetPinMode+0xe4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	7979      	ldrb	r1, [r7, #5]
 800110a:	79ba      	ldrb	r2, [r7, #6]
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	4611      	mov	r1, r2
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <MGPIO_voidSetPinMode+0xe4>)
 8001116:	430b      	orrs	r3, r1
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e018      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <MGPIO_voidSetPinMode+0xe8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	7979      	ldrb	r1, [r7, #5]
 8001122:	79ba      	ldrb	r2, [r7, #6]
 8001124:	0052      	lsls	r2, r2, #1
 8001126:	fa01 f202 	lsl.w	r2, r1, r2
 800112a:	4611      	mov	r1, r2
 800112c:	4a0f      	ldr	r2, [pc, #60]	; (800116c <MGPIO_voidSetPinMode+0xe8>)
 800112e:	430b      	orrs	r3, r1
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e00c      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  case _GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MGPIO_voidSetPinMode+0xec>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	7979      	ldrb	r1, [r7, #5]
 800113a:	79ba      	ldrb	r2, [r7, #6]
 800113c:	0052      	lsls	r2, r2, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4611      	mov	r1, r2
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <MGPIO_voidSetPinMode+0xec>)
 8001146:	430b      	orrs	r3, r1
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e000      	b.n	800114e <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 800114c:	bf00      	nop
    }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021c00 	.word	0x40021c00

08001174 <MGPIO_voidSetPullType>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8PullType                    */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPullType(u8 Copy_u8PortName ,u32 Copy_u8PinNum ,u32 Copy_u8PullType )
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	73fb      	strb	r3, [r7, #15]
	
		switch(Copy_u8PortName)
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b05      	cmp	r3, #5
 8001186:	d851      	bhi.n	800122c <MGPIO_voidSetPullType+0xb8>
 8001188:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <MGPIO_voidSetPullType+0x1c>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011a9 	.word	0x080011a9
 8001194:	080011bf 	.word	0x080011bf
 8001198:	080011d5 	.word	0x080011d5
 800119c:	080011eb 	.word	0x080011eb
 80011a0:	08001201 	.word	0x08001201
 80011a4:	08001217 	.word	0x08001217
	{
	  case _GPIOA_PORT : MGPIOA->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <MGPIO_voidSetPullType+0xc8>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	4921      	ldr	r1, [pc, #132]	; (800123c <MGPIO_voidSetPullType+0xc8>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	60cb      	str	r3, [r1, #12]
 80011bc:	e037      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  case _GPIOB_PORT : MGPIOB->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <MGPIO_voidSetPullType+0xcc>)
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	491c      	ldr	r1, [pc, #112]	; (8001240 <MGPIO_voidSetPullType+0xcc>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	60cb      	str	r3, [r1, #12]
 80011d2:	e02c      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  case _GPIOC_PORT : MGPIOC->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MGPIO_voidSetPullType+0xd0>)
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	4918      	ldr	r1, [pc, #96]	; (8001244 <MGPIO_voidSetPullType+0xd0>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
 80011e8:	e021      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  case _GPIOD_PORT : MGPIOD->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MGPIO_voidSetPullType+0xd4>)
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4913      	ldr	r1, [pc, #76]	; (8001248 <MGPIO_voidSetPullType+0xd4>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	60cb      	str	r3, [r1, #12]
 80011fe:	e016      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  case _GPIOE_PORT : MGPIOE->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MGPIO_voidSetPullType+0xd8>)
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	6879      	ldr	r1, [r7, #4]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	490f      	ldr	r1, [pc, #60]	; (800124c <MGPIO_voidSetPullType+0xd8>)
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
 8001214:	e00b      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  case _GPIOH_PORT : MGPIOH->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MGPIO_voidSetPullType+0xdc>)
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	490a      	ldr	r1, [pc, #40]	; (8001250 <MGPIO_voidSetPullType+0xdc>)
 8001226:	4313      	orrs	r3, r2
 8001228:	60cb      	str	r3, [r1, #12]
 800122a:	e000      	b.n	800122e <MGPIO_voidSetPullType+0xba>
	  default : /*ERROR*/ break ;
 800122c:	bf00      	nop
	}
	
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40020000 	.word	0x40020000
 8001240:	40020400 	.word	0x40020400
 8001244:	40020800 	.word	0x40020800
 8001248:	40020c00 	.word	0x40020c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40021c00 	.word	0x40021c00

08001254 <MGPIO_u8ReadData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum                                        */                   
/* 3- Function Return      -> LOC_u8ReturnValue                                                        */
/*******************************************************************************************************/

u8 MGPIO_u8ReadData(u8 Copy_u8PORT ,u8 Copy_u8PIN)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	460a      	mov	r2, r1
 800125e:	71fb      	strb	r3, [r7, #7]
 8001260:	4613      	mov	r3, r2
 8001262:	71bb      	strb	r3, [r7, #6]
	u8 L_u8Data = 0 ;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
	switch(Copy_u8PORT)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b05      	cmp	r3, #5
 800126c:	d84a      	bhi.n	8001304 <MGPIO_u8ReadData+0xb0>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <MGPIO_u8ReadData+0x20>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	0800128d 	.word	0x0800128d
 8001278:	080012a1 	.word	0x080012a1
 800127c:	080012b5 	.word	0x080012b5
 8001280:	080012c9 	.word	0x080012c9
 8001284:	080012dd 	.word	0x080012dd
 8001288:	080012f1 	.word	0x080012f1
	{ 
	  case _GPIOA_PORT :L_u8Data= GET_BIT(MGPIOA->IDR,Copy_u8PIN ) ; break;
 800128c:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MGPIO_u8ReadData+0xc0>)
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e032      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOB_PORT :L_u8Data= GET_BIT(MGPIOB->IDR,Copy_u8PIN ) ; break;
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <MGPIO_u8ReadData+0xc4>)
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e028      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOC_PORT :L_u8Data= GET_BIT(MGPIOC->IDR,Copy_u8PIN ) ; break;
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <MGPIO_u8ReadData+0xc8>)
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e01e      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOD_PORT :L_u8Data= GET_BIT(MGPIOD->IDR,Copy_u8PIN) ; break;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MGPIO_u8ReadData+0xcc>)
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	79bb      	ldrb	r3, [r7, #6]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e014      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOE_PORT :L_u8Data= GET_BIT(MGPIOE->IDR,Copy_u8PIN) ; break;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MGPIO_u8ReadData+0xd0>)
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
 80012ee:	e00a      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOH_PORT :L_u8Data= GET_BIT(MGPIOH->IDR,Copy_u8PIN) ; break;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <MGPIO_u8ReadData+0xd4>)
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	79bb      	ldrb	r3, [r7, #6]
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e000      	b.n	8001306 <MGPIO_u8ReadData+0xb2>
	  default : /*ERROR*/ break ;
 8001304:	bf00      	nop
		
	}
	return L_u8Data;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40021c00 	.word	0x40021c00

0800132c <MGPIO_voidWriteData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8State                       */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	460b      	mov	r3, r1
 8001338:	71bb      	strb	r3, [r7, #6]
 800133a:	4613      	mov	r3, r2
 800133c:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State==HIGH)
 800133e:	797b      	ldrb	r3, [r7, #5]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d155      	bne.n	80013f0 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	2b05      	cmp	r3, #5
 8001348:	f200 80ac 	bhi.w	80014a4 <MGPIO_voidWriteData+0x178>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <MGPIO_voidWriteData+0x28>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001383 	.word	0x08001383
 800135c:	08001399 	.word	0x08001399
 8001360:	080013af 	.word	0x080013af
 8001364:	080013c5 	.word	0x080013c5
 8001368:	080013db 	.word	0x080013db
		{
		case _GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 800136c:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <MGPIO_voidWriteData+0x18c>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	79ba      	ldrb	r2, [r7, #6]
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4611      	mov	r1, r2
 800137a:	4a4f      	ldr	r2, [pc, #316]	; (80014b8 <MGPIO_voidWriteData+0x18c>)
 800137c:	430b      	orrs	r3, r1
 800137e:	6153      	str	r3, [r2, #20]
 8001380:	e093      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <MGPIO_voidWriteData+0x190>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	79ba      	ldrb	r2, [r7, #6]
 8001388:	2101      	movs	r1, #1
 800138a:	fa01 f202 	lsl.w	r2, r1, r2
 800138e:	4611      	mov	r1, r2
 8001390:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <MGPIO_voidWriteData+0x190>)
 8001392:	430b      	orrs	r3, r1
 8001394:	6153      	str	r3, [r2, #20]
 8001396:	e088      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  SET_BIT(GPIOC_ODR,Copy_u8PinNum); break;
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <MGPIO_voidWriteData+0x194>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	79ba      	ldrb	r2, [r7, #6]
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	4611      	mov	r1, r2
 80013a6:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <MGPIO_voidWriteData+0x194>)
 80013a8:	430b      	orrs	r3, r1
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	e07d      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 80013ae:	4b45      	ldr	r3, [pc, #276]	; (80014c4 <MGPIO_voidWriteData+0x198>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	79ba      	ldrb	r2, [r7, #6]
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	4611      	mov	r1, r2
 80013bc:	4a41      	ldr	r2, [pc, #260]	; (80014c4 <MGPIO_voidWriteData+0x198>)
 80013be:	430b      	orrs	r3, r1
 80013c0:	6153      	str	r3, [r2, #20]
 80013c2:	e072      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <MGPIO_voidWriteData+0x19c>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	79ba      	ldrb	r2, [r7, #6]
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	4611      	mov	r1, r2
 80013d2:	4a3d      	ldr	r2, [pc, #244]	; (80014c8 <MGPIO_voidWriteData+0x19c>)
 80013d4:	430b      	orrs	r3, r1
 80013d6:	6153      	str	r3, [r2, #20]
 80013d8:	e067      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MGPIO_voidWriteData+0x1a0>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	79ba      	ldrb	r2, [r7, #6]
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4611      	mov	r1, r2
 80013e8:	4a38      	ldr	r2, [pc, #224]	; (80014cc <MGPIO_voidWriteData+0x1a0>)
 80013ea:	430b      	orrs	r3, r1
 80013ec:	6153      	str	r3, [r2, #20]
 80013ee:	e05c      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d858      	bhi.n	80014a8 <MGPIO_voidWriteData+0x17c>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <MGPIO_voidWriteData+0xd0>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001415 	.word	0x08001415
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001445 	.word	0x08001445
 8001408:	0800145d 	.word	0x0800145d
 800140c:	08001475 	.word	0x08001475
 8001410:	0800148d 	.word	0x0800148d
		{
		case _GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MGPIO_voidWriteData+0x18c>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	43d2      	mvns	r2, r2
 8001422:	4611      	mov	r1, r2
 8001424:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <MGPIO_voidWriteData+0x18c>)
 8001426:	400b      	ands	r3, r1
 8001428:	6153      	str	r3, [r2, #20]
 800142a:	e03e      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <MGPIO_voidWriteData+0x190>)
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	79ba      	ldrb	r2, [r7, #6]
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	43d2      	mvns	r2, r2
 800143a:	4611      	mov	r1, r2
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <MGPIO_voidWriteData+0x190>)
 800143e:	400b      	ands	r3, r1
 8001440:	6153      	str	r3, [r2, #20]
 8001442:	e032      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 8001444:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <MGPIO_voidWriteData+0x1a4>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	79ba      	ldrb	r2, [r7, #6]
 800144a:	2101      	movs	r1, #1
 800144c:	fa01 f202 	lsl.w	r2, r1, r2
 8001450:	43d2      	mvns	r2, r2
 8001452:	4611      	mov	r1, r2
 8001454:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <MGPIO_voidWriteData+0x1a4>)
 8001456:	400b      	ands	r3, r1
 8001458:	6153      	str	r3, [r2, #20]
 800145a:	e026      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MGPIO_voidWriteData+0x198>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	79ba      	ldrb	r2, [r7, #6]
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	43d2      	mvns	r2, r2
 800146a:	4611      	mov	r1, r2
 800146c:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <MGPIO_voidWriteData+0x198>)
 800146e:	400b      	ands	r3, r1
 8001470:	6153      	str	r3, [r2, #20]
 8001472:	e01a      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 8001474:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MGPIO_voidWriteData+0x19c>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	79ba      	ldrb	r2, [r7, #6]
 800147a:	2101      	movs	r1, #1
 800147c:	fa01 f202 	lsl.w	r2, r1, r2
 8001480:	43d2      	mvns	r2, r2
 8001482:	4611      	mov	r1, r2
 8001484:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <MGPIO_voidWriteData+0x19c>)
 8001486:	400b      	ands	r3, r1
 8001488:	6153      	str	r3, [r2, #20]
 800148a:	e00e      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MGPIO_voidWriteData+0x1a0>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	79ba      	ldrb	r2, [r7, #6]
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	43d2      	mvns	r2, r2
 800149a:	4611      	mov	r1, r2
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <MGPIO_voidWriteData+0x1a0>)
 800149e:	400b      	ands	r3, r1
 80014a0:	6153      	str	r3, [r2, #20]
 80014a2:	e002      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 80014a4:	bf00      	nop
 80014a6:	e000      	b.n	80014aa <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 80014a8:	bf00      	nop
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020814 	.word	0x40020814
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40020800 	.word	0x40020800

080014d4 <MGPIO_voidSetPinAltFn>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  ,Copy_u8ALF                           */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	460b      	mov	r3, r1
 80014e0:	71bb      	strb	r3, [r7, #6]
 80014e2:	4613      	mov	r3, r2
 80014e4:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d85b      	bhi.n	80015a4 <MGPIO_voidSetPinAltFn+0xd0>
	{
		switch(Copy_u8PortNum )
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	f200 80be 	bhi.w	8001670 <MGPIO_voidSetPinAltFn+0x19c>
 80014f4:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <MGPIO_voidSetPinAltFn+0x28>)
 80014f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fa:	bf00      	nop
 80014fc:	08001515 	.word	0x08001515
 8001500:	0800152d 	.word	0x0800152d
 8001504:	08001545 	.word	0x08001545
 8001508:	0800155d 	.word	0x0800155d
 800150c:	08001575 	.word	0x08001575
 8001510:	0800158d 	.word	0x0800158d
		{
			 case _GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001514:	4b5b      	ldr	r3, [pc, #364]	; (8001684 <MGPIO_voidSetPinAltFn+0x1b0>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	7979      	ldrb	r1, [r7, #5]
 800151a:	79ba      	ldrb	r2, [r7, #6]
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	fa01 f202 	lsl.w	r2, r1, r2
 8001522:	4611      	mov	r1, r2
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <MGPIO_voidSetPinAltFn+0x1b0>)
 8001526:	430b      	orrs	r3, r1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	e0a4      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800152c:	4b56      	ldr	r3, [pc, #344]	; (8001688 <MGPIO_voidSetPinAltFn+0x1b4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	7979      	ldrb	r1, [r7, #5]
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	0092      	lsls	r2, r2, #2
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4611      	mov	r1, r2
 800153c:	4a52      	ldr	r2, [pc, #328]	; (8001688 <MGPIO_voidSetPinAltFn+0x1b4>)
 800153e:	430b      	orrs	r3, r1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	e098      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <MGPIO_voidSetPinAltFn+0x1b8>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	7979      	ldrb	r1, [r7, #5]
 800154a:	79ba      	ldrb	r2, [r7, #6]
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	fa01 f202 	lsl.w	r2, r1, r2
 8001552:	4611      	mov	r1, r2
 8001554:	4a4d      	ldr	r2, [pc, #308]	; (800168c <MGPIO_voidSetPinAltFn+0x1b8>)
 8001556:	430b      	orrs	r3, r1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e08c      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800155c:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <MGPIO_voidSetPinAltFn+0x1bc>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	7979      	ldrb	r1, [r7, #5]
 8001562:	79ba      	ldrb	r2, [r7, #6]
 8001564:	0092      	lsls	r2, r2, #2
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4611      	mov	r1, r2
 800156c:	4a48      	ldr	r2, [pc, #288]	; (8001690 <MGPIO_voidSetPinAltFn+0x1bc>)
 800156e:	430b      	orrs	r3, r1
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	e080      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <MGPIO_voidSetPinAltFn+0x1c0>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	7979      	ldrb	r1, [r7, #5]
 800157a:	79ba      	ldrb	r2, [r7, #6]
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	4611      	mov	r1, r2
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <MGPIO_voidSetPinAltFn+0x1c0>)
 8001586:	430b      	orrs	r3, r1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	e074      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <MGPIO_voidSetPinAltFn+0x1c4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	7979      	ldrb	r1, [r7, #5]
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	fa01 f202 	lsl.w	r2, r1, r2
 800159a:	4611      	mov	r1, r2
 800159c:	4a3e      	ldr	r2, [pc, #248]	; (8001698 <MGPIO_voidSetPinAltFn+0x1c4>)
 800159e:	430b      	orrs	r3, r1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	e068      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
	// 8 : 15
	// i need 8 = 0 & 15 = 7
	
	else
	{
	switch(Copy_u8PortNum )
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d864      	bhi.n	8001674 <MGPIO_voidSetPinAltFn+0x1a0>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <MGPIO_voidSetPinAltFn+0xdc>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015e5 	.word	0x080015e5
 80015b8:	08001601 	.word	0x08001601
 80015bc:	0800161d 	.word	0x0800161d
 80015c0:	08001639 	.word	0x08001639
 80015c4:	08001655 	.word	0x08001655
		{
			 case _GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <MGPIO_voidSetPinAltFn+0x1b0>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	7979      	ldrb	r1, [r7, #5]
 80015ce:	79ba      	ldrb	r2, [r7, #6]
 80015d0:	f002 0207 	and.w	r2, r2, #7
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4611      	mov	r1, r2
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <MGPIO_voidSetPinAltFn+0x1b0>)
 80015de:	430b      	orrs	r3, r1
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24
 80015e2:	e048      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <MGPIO_voidSetPinAltFn+0x1b4>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	7979      	ldrb	r1, [r7, #5]
 80015ea:	79ba      	ldrb	r2, [r7, #6]
 80015ec:	f002 0207 	and.w	r2, r2, #7
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	4611      	mov	r1, r2
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <MGPIO_voidSetPinAltFn+0x1b4>)
 80015fa:	430b      	orrs	r3, r1
 80015fc:	6253      	str	r3, [r2, #36]	; 0x24
 80015fe:	e03a      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <MGPIO_voidSetPinAltFn+0x1b8>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	7979      	ldrb	r1, [r7, #5]
 8001606:	79ba      	ldrb	r2, [r7, #6]
 8001608:	f002 0207 	and.w	r2, r2, #7
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4611      	mov	r1, r2
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <MGPIO_voidSetPinAltFn+0x1b8>)
 8001616:	430b      	orrs	r3, r1
 8001618:	6253      	str	r3, [r2, #36]	; 0x24
 800161a:	e02c      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MGPIO_voidSetPinAltFn+0x1bc>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	7979      	ldrb	r1, [r7, #5]
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	f002 0207 	and.w	r2, r2, #7
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	4611      	mov	r1, r2
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001632:	430b      	orrs	r3, r1
 8001634:	6253      	str	r3, [r2, #36]	; 0x24
 8001636:	e01e      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001638:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MGPIO_voidSetPinAltFn+0x1c0>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	7979      	ldrb	r1, [r7, #5]
 800163e:	79ba      	ldrb	r2, [r7, #6]
 8001640:	f002 0207 	and.w	r2, r2, #7
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	fa01 f202 	lsl.w	r2, r1, r2
 800164a:	4611      	mov	r1, r2
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <MGPIO_voidSetPinAltFn+0x1c0>)
 800164e:	430b      	orrs	r3, r1
 8001650:	6253      	str	r3, [r2, #36]	; 0x24
 8001652:	e010      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001654:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	7979      	ldrb	r1, [r7, #5]
 800165a:	79ba      	ldrb	r2, [r7, #6]
 800165c:	f002 0207 	and.w	r2, r2, #7
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	4611      	mov	r1, r2
 8001668:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <MGPIO_voidSetPinAltFn+0x1c4>)
 800166a:	430b      	orrs	r3, r1
 800166c:	6253      	str	r3, [r2, #36]	; 0x24
 800166e:	e002      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001674:	bf00      	nop
		
		
	}

	
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021c00 	.word	0x40021c00

0800169c <MNVIC_vInterruptSetEnable>:
 * Function: 	Enable External Interrupts
 * Inputs: 		Interrupt ID
 * Outputs:		None
 */

void MNVIC_vInterruptSetEnable(u8 Copy_u8InterruptID){
 800169c:	b490      	push	{r4, r7}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	NVIC -> ISER[Copy_u8InterruptID / REGISTER_BITS] |= (1<<(Copy_u8InterruptID % REGISTER_BITS));
 80016a6:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <MNVIC_vInterruptSetEnable+0x3c>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2d8      	uxtb	r0, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	79fa      	ldrb	r2, [r7, #7]
 80016b6:	f002 021f 	and.w	r2, r2, #31
 80016ba:	2101      	movs	r1, #1
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	4614      	mov	r4, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <MNVIC_vInterruptSetEnable+0x3c>)
 80016c4:	4601      	mov	r1, r0
 80016c6:	4323      	orrs	r3, r4
 80016c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc90      	pop	{r4, r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <MNVIC_vSetGroupMode>:
 * Function: 	Set Group Mode in SCB (AIRCR)
 * Inputs: 		Group Mode
 * Outputs:		None
 */

void MNVIC_vSetGroupMode(Group_Mode Copy_GroupMode){
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
	Global_u32SetGroupPriority = VECTKEY | (Copy_GroupMode << 8);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <MNVIC_vSetGroupMode+0x30>)
 80016f6:	601a      	str	r2, [r3, #0]
	AIRCR = Global_u32SetGroupPriority;
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <MNVIC_vSetGroupMode+0x34>)
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <MNVIC_vSetGroupMode+0x30>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	20000060 	.word	0x20000060
 8001710:	e000ed0c 	.word	0xe000ed0c

08001714 <MNVIC_vSetInterruptPriority>:
 * 				2- Group ID
 * 				3- Subgroup ID
 * Outputs:		None
 */

void MNVIC_vSetInterruptPriority(u8 Copy_u8InterruptID, u8 Copy_GroupID, u8 Copy_SubGroupID){
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	460b      	mov	r3, r1
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	4613      	mov	r3, r2
 8001724:	717b      	strb	r3, [r7, #5]
	u8 u8_PrioValue = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
	switch (Global_u32SetGroupPriority){
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <MNVIC_vSetInterruptPriority+0x9c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3b03      	subs	r3, #3
 8001730:	2b04      	cmp	r3, #4
 8001732:	d82e      	bhi.n	8001792 <MNVIC_vSetInterruptPriority+0x7e>
 8001734:	a201      	add	r2, pc, #4	; (adr r2, 800173c <MNVIC_vSetInterruptPriority+0x28>)
 8001736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173a:	bf00      	nop
 800173c:	08001751 	.word	0x08001751
 8001740:	08001757 	.word	0x08001757
 8001744:	08001769 	.word	0x08001769
 8001748:	0800177b 	.word	0x0800177b
 800174c:	0800178d 	.word	0x0800178d
	case MNVIC_G16_SG0: u8_PrioValue = Copy_GroupID; break;
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	73fb      	strb	r3, [r7, #15]
 8001754:	e01d      	b.n	8001792 <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G8_SG2: 	u8_PrioValue = (Copy_GroupID << 1) | Copy_SubGroupID; break;
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	b25a      	sxtb	r2, r3
 800175c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001760:	4313      	orrs	r3, r2
 8001762:	b25b      	sxtb	r3, r3
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	e014      	b.n	8001792 <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G4_SG4: 	u8_PrioValue = (Copy_GroupID << 2) | Copy_SubGroupID; break;
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	b25a      	sxtb	r2, r3
 800176e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001772:	4313      	orrs	r3, r2
 8001774:	b25b      	sxtb	r3, r3
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e00b      	b.n	8001792 <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G2_SG8: 	u8_PrioValue = (Copy_GroupID << 3) | Copy_SubGroupID; break;
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001784:	4313      	orrs	r3, r2
 8001786:	b25b      	sxtb	r3, r3
 8001788:	73fb      	strb	r3, [r7, #15]
 800178a:	e002      	b.n	8001792 <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G0_SG16: u8_PrioValue = Copy_SubGroupID; break;
 800178c:	797b      	ldrb	r3, [r7, #5]
 800178e:	73fb      	strb	r3, [r7, #15]
 8001790:	bf00      	nop
	}
	NVIC -> IPR [Copy_u8InterruptID] = (u8_PrioValue << 4);
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <MNVIC_vSetInterruptPriority+0xa0>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000060 	.word	0x20000060
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <MRCC_vInit>:
#include "MRCC_Int.h"
#include "MRCC_Private.h"
#include "MRCC_Config.h"

void MRCC_vInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
	/*1- CSS (ON/OFF) */

	/*2- HSE_BYP CLR->Oscillator Enable not bypassed, SET->Oscillator Disable bypassed */
	CLR_BIT(RCC -> CR, HSEBYP);
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MRCC_vInit+0x4c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a10      	ldr	r2, [pc, #64]	; (8001804 <MRCC_vInit+0x4c>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

	/*3- select clock switch (HSI/HSE/PLL) */
	SET_BIT(RCC -> CFGR, SW0);
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MRCC_vInit+0x4c>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <MRCC_vInit+0x4c>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6093      	str	r3, [r2, #8]

	/*5- PLL configuration */

	/*6- Enable the selected clock (HSI ON / HSE ON / PLL ON)*/
#if RCC_HSE_ENABLE == ENABLE
	SET_BIT(RCC->CR, HSEON);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MRCC_vInit+0x4c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <MRCC_vInit+0x4c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
#endif
#if RCC_HSI_ENABLE == ENABLE
	SET_BIT(RCC->CR, HSION);
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MRCC_vInit+0x4c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <MRCC_vInit+0x4c>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6013      	str	r3, [r2, #0]
#endif
#if RCC_PLL_ENABLE == ENABLE
	SET_BIT(RCC->CR, PLLON);
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <MRCC_vInit+0x4c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <MRCC_vInit+0x4c>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]
#endif

}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <MRCC_vEnableClock>:

void MRCC_vEnableClock(RCC_ENR REG, RCC_Peripheral PER)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
/******************** Assignment *******************************/
	switch(REG){
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d836      	bhi.n	800188c <MRCC_vEnableClock+0x84>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <MRCC_vEnableClock+0x1c>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	0800184b 	.word	0x0800184b
 800182c:	08001861 	.word	0x08001861
 8001830:	08001877 	.word	0x08001877
	case AHB1:
		SET_BIT(RCC -> AHB1ENR ,  PER);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <MRCC_vEnableClock+0x94>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4611      	mov	r1, r2
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <MRCC_vEnableClock+0x94>)
 8001844:	430b      	orrs	r3, r1
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8001848:	e021      	b.n	800188e <MRCC_vEnableClock+0x86>
	case AHB2:
		SET_BIT(RCC -> AHB2ENR ,  PER);
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MRCC_vEnableClock+0x94>)
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	79ba      	ldrb	r2, [r7, #6]
 8001850:	2101      	movs	r1, #1
 8001852:	fa01 f202 	lsl.w	r2, r1, r2
 8001856:	4611      	mov	r1, r2
 8001858:	4a10      	ldr	r2, [pc, #64]	; (800189c <MRCC_vEnableClock+0x94>)
 800185a:	430b      	orrs	r3, r1
 800185c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 800185e:	e016      	b.n	800188e <MRCC_vEnableClock+0x86>
	case APB1:
		SET_BIT(RCC -> APB1ENR ,  PER);
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MRCC_vEnableClock+0x94>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	79ba      	ldrb	r2, [r7, #6]
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	4611      	mov	r1, r2
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <MRCC_vEnableClock+0x94>)
 8001870:	430b      	orrs	r3, r1
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001874:	e00b      	b.n	800188e <MRCC_vEnableClock+0x86>
	case APB2:
		SET_BIT(RCC -> APB2ENR ,  PER);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MRCC_vEnableClock+0x94>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	79ba      	ldrb	r2, [r7, #6]
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	4611      	mov	r1, r2
 8001884:	4a05      	ldr	r2, [pc, #20]	; (800189c <MRCC_vEnableClock+0x94>)
 8001886:	430b      	orrs	r3, r1
 8001888:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 800188a:	e000      	b.n	800188e <MRCC_vEnableClock+0x86>
	default:
		break;
 800188c:	bf00      	nop
	}
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <SPI1_IRQHandler>:

void MSPI4_voidSetCallBack	(void(*Cptr)(void)){
	SPI4_Callback = Cptr;
}

void SPI1_IRQHandler (void){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	SPI1_Callback();
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <SPI1_IRQHandler+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4798      	blx	r3
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000064 	.word	0x20000064

080018b4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	SPI2_Callback();
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <SPI2_IRQHandler+0x10>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4798      	blx	r3
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000068 	.word	0x20000068

080018c8 <SPI3_IRQHandler>:

void SPI3_IRQHandler (void){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	SPI3_Callback();
 80018cc:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <SPI3_IRQHandler+0x10>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4798      	blx	r3
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000006c 	.word	0x2000006c

080018dc <SPI4_IRQHandler>:

void SPI4_IRQHandler (void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	SPI4_Callback();
 80018e0:	4b02      	ldr	r3, [pc, #8]	; (80018ec <SPI4_IRQHandler+0x10>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4798      	blx	r3
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000070 	.word	0x20000070

080018f0 <TIM2_IRQHandler>:
u8 park2 = 0;
u8 park3 = 0;

#if TIMER2 == ENABLE
void TIM2_IRQHandler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	if((TIM2 -> SR) & SR_UIF)  // means Overflow occurred
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00d      	beq.n	800191e <TIM2_IRQHandler+0x2e>
	{
		park1 ++;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <TIM2_IRQHandler+0x38>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <TIM2_IRQHandler+0x38>)
 800190c:	701a      	strb	r2, [r3, #0]
		(TIM2 -> SR) &= ~(SR_UIF);
 800190e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	6113      	str	r3, [r2, #16]
	}

}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	20000074 	.word	0x20000074

0800192c <TIM3_IRQHandler>:
#endif

#if TIMER3 == ENABLE
void TIM3_IRQHandler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	if((TIM3 -> SR) & SR_UIF) // means Overflow occurred
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <TIM3_IRQHandler+0x34>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <TIM3_IRQHandler+0x28>
	{
		park2 ++;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <TIM3_IRQHandler+0x38>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <TIM3_IRQHandler+0x38>)
 8001946:	701a      	strb	r2, [r3, #0]
		(TIM3 -> SR) &= ~(SR_UIF);
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <TIM3_IRQHandler+0x34>)
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <TIM3_IRQHandler+0x34>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6113      	str	r3, [r2, #16]
	}

}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40000400 	.word	0x40000400
 8001964:	20000075 	.word	0x20000075

08001968 <TIM4_IRQHandler>:
#endif

#if TIMER4 == ENABLE
void TIM4_IRQHandler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	if((TIM4 -> SR) & SR_UIF) // means Overflow occurred
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <TIM4_IRQHandler+0x34>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <TIM4_IRQHandler+0x28>
	{
		park3++;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <TIM4_IRQHandler+0x38>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <TIM4_IRQHandler+0x38>)
 8001982:	701a      	strb	r2, [r3, #0]
		(TIM4 -> SR) &= ~(SR_UIF);
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <TIM4_IRQHandler+0x34>)
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <TIM4_IRQHandler+0x34>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6113      	str	r3, [r2, #16]
	}

}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40000800 	.word	0x40000800
 80019a0:	20000076 	.word	0x20000076

080019a4 <MUSART_voidInit>:
Return type = void
Input parameters = u16 copy_u16BaudRate
Functionality : Initializes USART1
*/

void MUSART_voidInit(u32 copy_u32BaudRate){
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	/* Configure baud rate */
	float BRR_floatvalue, BRR_fractionvalue;
	u16 BRR_value;
	u8  BRR_Fraction;
#ifdef UART_HSI
	BRR_floatvalue = UART_HSI / (16 * copy_u32BaudRate);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <MUSART_voidInit+0xd4>)
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019be:	edc7 7a05 	vstr	s15, [r7, #20]
#endif
#ifdef UART_HSE
	BRR_floatvalue = UART_HSE / (16 * copy_u32BaudRate);
#endif
	BRR_value = (u16) BRR_floatvalue;
 80019c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ca:	ee17 3a90 	vmov	r3, s15
 80019ce:	827b      	strh	r3, [r7, #18]
	BRR_fractionvalue = BRR_floatvalue - BRR_value;
 80019d0:	8a7b      	ldrh	r3, [r7, #18]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	ed97 7a05 	vldr	s14, [r7, #20]
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	edc7 7a03 	vstr	s15, [r7, #12]
	BRR_Fraction = BRR_fractionvalue * 16;
 80019e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80019ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f6:	edc7 7a00 	vstr	s15, [r7]
 80019fa:	783b      	ldrb	r3, [r7, #0]
 80019fc:	72fb      	strb	r3, [r7, #11]

	MUSART1 -> BRR = (BRR_value << 4) | (BRR_Fraction);
 80019fe:	8a7b      	ldrh	r3, [r7, #18]
 8001a00:	011a      	lsls	r2, r3, #4
 8001a02:	7afb      	ldrb	r3, [r7, #11]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a08:	609a      	str	r2, [r3, #8]

	CLR_BIT(MUSART1->CR1,OVER8);		/*Over sampling by 16*/
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a14:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR1,M);
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a20:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR1,PCE);
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a2c:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR2,12);
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a38:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a44:	6113      	str	r3, [r2, #16]

	SET_BIT(MUSART1->CR1,TE);
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	60d3      	str	r3, [r2, #12]
	SET_BIT(MUSART1->CR1,RE);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	60d3      	str	r3, [r2, #12]
	SET_BIT(MUSART1->CR1,RXNEIE);
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <MUSART_voidInit+0xd8>)
 8001a64:	f043 0320 	orr.w	r3, r3, #32
 8001a68:	60d3      	str	r3, [r2, #12]


}
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	40011000 	.word	0x40011000

08001a80 <MUSART_voidSendData>:
Return type = void
Input parameters = u8* copy_u8Data,u8 copy_u8Len
Functionality : Sends data when transmitter data register is not empty
*/

void MUSART_voidSendData(u8* copy_u8Data,u8 copy_u8Len){
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70fb      	strb	r3, [r7, #3]

	for(u8 i=0;i<copy_u8Len;i++){
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e00f      	b.n	8001ab2 <MUSART_voidSendData+0x32>
		MUSART1->DR=copy_u8Data[i];
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4413      	add	r3, r2
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <MUSART_voidSendData+0x48>)
 8001a9c:	605a      	str	r2, [r3, #4]
		while(GET_BIT(MUSART1->SR,7)==0);
 8001a9e:	bf00      	nop
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <MUSART_voidSendData+0x48>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f9      	beq.n	8001aa0 <MUSART_voidSendData+0x20>
	for(u8 i=0;i<copy_u8Len;i++){
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3eb      	bcc.n	8001a92 <MUSART_voidSendData+0x12>
	}

}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40011000 	.word	0x40011000

08001acc <MUSART_u8ReadData>:
Return type = u8
Input parameters = void
Functionality : Reads data when read data register is not empty
*/

u8 MUSART_u8ReadData(void){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
	//u16 local_u16Timeout=0;
	u8 local_u8RecieveData=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	while(GET_BIT(MUSART1->SR,5)==0);
 8001ad6:	bf00      	nop
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MUSART_u8ReadData+0x2c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f9      	beq.n	8001ad8 <MUSART_u8ReadData+0xc>
	local_u8RecieveData=(u8) MUSART1->DR;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <MUSART_u8ReadData+0x2c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	71fb      	strb	r3, [r7, #7]
	return local_u8RecieveData;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40011000 	.word	0x40011000

08001afc <MUSART_voidEnable>:
Return type = void
Input parameters = void
Functionality : Enables USART1
*/

void MUSART_voidEnable(void){
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
	SET_BIT(MUSART1->CR1,UE);
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <MUSART_voidEnable+0x1c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <MUSART_voidEnable+0x1c>)
 8001b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40011000 	.word	0x40011000

08001b1c <MUSART_voidDisable>:
Return type = void
Input parameters = void
Functionality : Disables USART1
*/

void MUSART_voidDisable(void){
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	CLR_BIT(MUSART1->CR1,UE);
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <MUSART_voidDisable+0x1c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a04      	ldr	r2, [pc, #16]	; (8001b38 <MUSART_voidDisable+0x1c>)
 8001b26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b2a:	60d3      	str	r3, [r2, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40011000 	.word	0x40011000

08001b3c <MUSART_voidCallBack>:
Return type = void
Input parameters = void(*Fptr)(void)
Functionality : Initiates callback for USART1
*/

void MUSART_voidCallBack(void(*Fptr)(void)){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	USART_CallBack=Fptr;
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <MUSART_voidCallBack+0x1c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000078 	.word	0x20000078

08001b5c <USART1_IRQHandler>:
Return type = void
Input parameters = void
Functionality : ISR of USART1
*/

void USART1_IRQHandler(void){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	USART_CallBack();
 8001b60:	4b02      	ldr	r3, [pc, #8]	; (8001b6c <USART1_IRQHandler+0x10>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4798      	blx	r3
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000078 	.word	0x20000078

08001b70 <Parking_3>:

/*******************************************************************************************************/
/*************************************** CALLBACK FUNCTIONS ********************************************/
/*******************************************************************************************************/

void Parking_3(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	if(Price[2] != 0){
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <Parking_3+0x44>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d018      	beq.n	8001bae <Parking_3+0x3e>
		LCD_displayStringRowColumn(0, 0, "Please Pay: ");
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <Parking_3+0x48>)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7fe fe4b 	bl	800081c <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
 8001b86:	2100      	movs	r1, #0
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7fe fe17 	bl	80007bc <LCD_moveCursor>
		LCD_intgerToString(Price[2]);
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <Parking_3+0x44>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fe57 	bl	8000846 <LCD_intgerToString>
		LCD_displayString(" LE");
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <Parking_3+0x4c>)
 8001b9a:	f7fe fdf3 	bl	8000784 <LCD_displayString>
		LCD_displayStringRowColumn(0, 0, "Amount Paid: ");
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <Parking_3+0x50>)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7fe fe3a 	bl	800081c <LCD_displayStringRowColumn>
		g_get_amount = 3;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <Parking_3+0x54>)
 8001baa:	2203      	movs	r2, #3
 8001bac:	701a      	strb	r2, [r3, #0]
	}
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	2000007c 	.word	0x2000007c
 8001bb8:	080020f4 	.word	0x080020f4
 8001bbc:	08002104 	.word	0x08002104
 8001bc0:	08002108 	.word	0x08002108
 8001bc4:	2000008a 	.word	0x2000008a

08001bc8 <Parking_2>:

void Parking_2(void){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if(Price[1] != 0){
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <Parking_2+0x44>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <Parking_2+0x3e>
		LCD_displayStringRowColumn(0, 0, "Please Pay: ");
 8001bd4:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <Parking_2+0x48>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7fe fe1f 	bl	800081c <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7fe fdeb 	bl	80007bc <LCD_moveCursor>
		LCD_intgerToString(Price[1]);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <Parking_2+0x44>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fe2b 	bl	8000846 <LCD_intgerToString>
		LCD_displayString(" LE");
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <Parking_2+0x4c>)
 8001bf2:	f7fe fdc7 	bl	8000784 <LCD_displayString>
		LCD_displayStringRowColumn(0, 0, "Amount Paid: ");
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <Parking_2+0x50>)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7fe fe0e 	bl	800081c <LCD_displayStringRowColumn>
		g_get_amount = 2;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <Parking_2+0x54>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	701a      	strb	r2, [r3, #0]
	}
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000007c 	.word	0x2000007c
 8001c10:	080020f4 	.word	0x080020f4
 8001c14:	08002104 	.word	0x08002104
 8001c18:	08002108 	.word	0x08002108
 8001c1c:	2000008a 	.word	0x2000008a

08001c20 <Parking_1>:

void Parking_1(void){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
	if(Price[0] != 0){
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <Parking_1+0x44>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d018      	beq.n	8001c5e <Parking_1+0x3e>
		LCD_displayStringRowColumn(0, 0, "Please Pay: ");
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <Parking_1+0x48>)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7fe fdf3 	bl	800081c <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
 8001c36:	2100      	movs	r1, #0
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7fe fdbf 	bl	80007bc <LCD_moveCursor>
		LCD_intgerToString(Price[0]);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <Parking_1+0x44>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fdff 	bl	8000846 <LCD_intgerToString>
		LCD_displayString(" LE");
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <Parking_1+0x4c>)
 8001c4a:	f7fe fd9b 	bl	8000784 <LCD_displayString>
		LCD_displayStringRowColumn(0, 0, "Amount Paid: ");
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <Parking_1+0x50>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7fe fde2 	bl	800081c <LCD_displayStringRowColumn>
		g_get_amount = 1;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <Parking_1+0x54>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000007c 	.word	0x2000007c
 8001c68:	080020f4 	.word	0x080020f4
 8001c6c:	08002104 	.word	0x08002104
 8001c70:	08002108 	.word	0x08002108
 8001c74:	2000008a 	.word	0x2000008a

08001c78 <SaveData>:

void SaveData(void){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	volatile static u8 Park_ID;
	if(g_rec_flag == 0){
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <SaveData+0x60>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d110      	bne.n	8001ca6 <SaveData+0x2e>
		Park_ID = 0;
 8001c84:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <SaveData+0x64>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
		Park_ID = Comms_Read_Write(USART_1, &dummy_comms_val, 1, READ);
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4914      	ldr	r1, [pc, #80]	; (8001ce0 <SaveData+0x68>)
 8001c90:	2000      	movs	r0, #0
 8001c92:	f7fe fae4 	bl	800025e <Comms_Read_Write>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <SaveData+0x64>)
 8001c9c:	701a      	strb	r2, [r3, #0]
		g_rec_flag = 1;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <SaveData+0x60>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
	}
	else if(g_rec_flag == 1){
		Price[Park_ID - 1] = Comms_Read_Write(USART_1, &dummy_comms_val, 1, READ);
		g_rec_flag = 0;
	}
}
 8001ca4:	e016      	b.n	8001cd4 <SaveData+0x5c>
	else if(g_rec_flag == 1){
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <SaveData+0x60>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d112      	bne.n	8001cd4 <SaveData+0x5c>
		Price[Park_ID - 1] = Comms_Read_Write(USART_1, &dummy_comms_val, 1, READ);
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	490b      	ldr	r1, [pc, #44]	; (8001ce0 <SaveData+0x68>)
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe fad2 	bl	800025e <Comms_Read_Write>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <SaveData+0x64>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <SaveData+0x6c>)
 8001cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		g_rec_flag = 0;
 8001cce:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <SaveData+0x60>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000089 	.word	0x20000089
 8001cdc:	2000008b 	.word	0x2000008b
 8001ce0:	20000088 	.word	0x20000088
 8001ce4:	2000007c 	.word	0x2000007c

08001ce8 <Give_LeftOver>:

/*******************************************************************************************************/
/************************************** ADDITIONAL FUNCTIONS *******************************************/
/*******************************************************************************************************/

void Give_LeftOver(s32 Amount){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	LCD_clearScreen();
 8001cf0:	f7fe fdbd 	bl	800086e <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "Take Change: ");
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <Give_LeftOver+0x40>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7fe fd8f 	bl	800081c <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7fe fd5b 	bl	80007bc <LCD_moveCursor>
	LCD_intgerToString(Amount);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fd9d 	bl	8000846 <LCD_intgerToString>
	LCD_displayString(" LE");
 8001d0c:	4807      	ldr	r0, [pc, #28]	; (8001d2c <Give_LeftOver+0x44>)
 8001d0e:	f7fe fd39 	bl	8000784 <LCD_displayString>
	_delay_ms(500);
 8001d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d16:	f7fe fe27 	bl	8000968 <_delay_ms>
	LCD_clearScreen();
 8001d1a:	f7fe fda8 	bl	800086e <LCD_clearScreen>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	08002118 	.word	0x08002118
 8001d2c:	08002104 	.word	0x08002104

08001d30 <Get_Amount>:

s32 Get_Amount(u8 Park_No){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
	s32 total = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
	s32 net = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
	LCD_displayStringRowColumn(1, 0, "             ");
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <Get_Amount+0xbc>)
 8001d44:	2100      	movs	r1, #0
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7fe fd68 	bl	800081c <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7fe fd34 	bl	80007bc <LCD_moveCursor>
	while(1){
		s32 key =0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
		key = KEYPAD_getPressedKey();
 8001d58:	f7fe fac3 	bl	80002e2 <KEYPAD_getPressedKey>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]
		if(key == '='){
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b3d      	cmp	r3, #61	; 0x3d
 8001d64:	d010      	beq.n	8001d88 <Get_Amount+0x58>
			break;
		}
		LCD_intgerToString(key);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7fe fd6d 	bl	8000846 <LCD_intgerToString>
		total = (total * 10) + key;
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
		_delay_ms(500);
 8001d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d82:	f7fe fdf1 	bl	8000968 <_delay_ms>
	while(1){
 8001d86:	e7e5      	b.n	8001d54 <Get_Amount+0x24>
			break;
 8001d88:	bf00      	nop
	}
	if(Price[Park_No - 1] > 0){
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <Get_Amount+0xc0>)
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	dd08      	ble.n	8001daa <Get_Amount+0x7a>
		net = (total - Price[Park_No - 1]);
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <Get_Amount+0xc0>)
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	e007      	b.n	8001dba <Get_Amount+0x8a>
	}
	else{
		net = (total + Price[Park_No - 1]);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <Get_Amount+0xc0>)
 8001db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4413      	add	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
	}
	if(net < 0){
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	da06      	bge.n	8001dce <Get_Amount+0x9e>
		Price[Park_No -1] = net;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	490a      	ldr	r1, [pc, #40]	; (8001df0 <Get_Amount+0xc0>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001dcc:	e008      	b.n	8001de0 <Get_Amount+0xb0>
	}
	else{
		g_get_amount = 0;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <Get_Amount+0xc4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		Price[Park_No -1] = 0;
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <Get_Amount+0xc0>)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return net;
 8001de0:	693b      	ldr	r3, [r7, #16]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	08002128 	.word	0x08002128
 8001df0:	2000007c 	.word	0x2000007c
 8001df4:	2000008a 	.word	0x2000008a

08001df8 <main>:
/*******************************************************************************************************/
/***************************************** MAIN FUNCTIONS **********************************************/
/*******************************************************************************************************/

int main(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af04      	add	r7, sp, #16
	s32 amount_left = -1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	607b      	str	r3, [r7, #4]
	/************ Clock Initialization ****************/

	MRCC_vInit();
 8001e04:	f7ff fcd8 	bl	80017b8 <MRCC_vInit>

	/************* PB Initialization *****************/

	PB_InterruptInit(PORT_A, PIN_0, PULL_UP, FALLING_TRIGGER, Parking_1, 0, 0);					/* 1 PB */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <main+0x104>)
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2301      	movs	r3, #1
 8001e16:	2201      	movs	r2, #1
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7fe fd2e 	bl	800087c <PB_InterruptInit>
	PB_InterruptInit(PORT_A, PIN_1, PULL_UP, FALLING_TRIGGER, Parking_2, 0, 0);					/* 2 PB */
 8001e20:	2300      	movs	r3, #0
 8001e22:	9302      	str	r3, [sp, #8]
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <main+0x108>)
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2101      	movs	r1, #1
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7fe fd22 	bl	800087c <PB_InterruptInit>
	PB_InterruptInit(PORT_A, PIN_2, PULL_UP, FALLING_TRIGGER, Parking_3, 0, 0);					/* 3 PB */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9302      	str	r3, [sp, #8]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <main+0x10c>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2301      	movs	r3, #1
 8001e46:	2201      	movs	r2, #1
 8001e48:	2102      	movs	r1, #2
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7fe fd16 	bl	800087c <PB_InterruptInit>

	/************* LCD Initialization ****************/

	LCD_init();
 8001e50:	f7fe fb4c 	bl	80004ec <LCD_init>

	/*************** UART Initialization *************/

	Comms_Init(USART_1, 9600);
 8001e54:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe f9bb 	bl	80001d4 <Comms_Init>
	Comms_Enable_Disable(USART_1, ENABLE);
 8001e5e:	2101      	movs	r1, #1
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe f9e8 	bl	8000236 <Comms_Enable_Disable>
	Comms_SetCallBack(USART_1, SaveData);
 8001e66:	4928      	ldr	r1, [pc, #160]	; (8001f08 <main+0x110>)
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7fe fa1d 	bl	80002a8 <Comms_SetCallBack>

	while (1)
	{
    	if(g_get_amount){
 8001e6e:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <main+0x114>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0fb      	beq.n	8001e6e <main+0x76>
    		amount_left = Get_Amount(g_get_amount);
 8001e76:	4b25      	ldr	r3, [pc, #148]	; (8001f0c <main+0x114>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff58 	bl	8001d30 <Get_Amount>
 8001e80:	6078      	str	r0, [r7, #4]
    		if(amount_left == 0){
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <main+0xbe>
    			LCD_clearScreen();
 8001e88:	f7fe fcf1 	bl	800086e <LCD_clearScreen>
    			LCD_displayStringRowColumn(0, 0, "Thank You");
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <main+0x118>)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7fe fcc3 	bl	800081c <LCD_displayStringRowColumn>
    			Comms_Read_Write(USART_1, &success, 1, WRITE);
 8001e96:	2301      	movs	r3, #1
 8001e98:	2201      	movs	r2, #1
 8001e9a:	491e      	ldr	r1, [pc, #120]	; (8001f14 <main+0x11c>)
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7fe f9de 	bl	800025e <Comms_Read_Write>
    			amount_left = -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	607b      	str	r3, [r7, #4]
    			_delay_ms(500);
 8001ea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eac:	f7fe fd5c 	bl	8000968 <_delay_ms>
    			LCD_clearScreen();
 8001eb0:	f7fe fcdd 	bl	800086e <LCD_clearScreen>
 8001eb4:	e7db      	b.n	8001e6e <main+0x76>
    		}
    		else if(amount_left > 0){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dd0c      	ble.n	8001ed6 <main+0xde>
    			Give_LeftOver(amount_left);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff13 	bl	8001ce8 <Give_LeftOver>
    			Comms_Read_Write(USART_1, &success, 1, WRITE);
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4913      	ldr	r1, [pc, #76]	; (8001f14 <main+0x11c>)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7fe f9c8 	bl	800025e <Comms_Read_Write>
    			amount_left = -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e7cb      	b.n	8001e6e <main+0x76>
    		}
    		else if (amount_left < 0 && g_get_amount){
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	dac8      	bge.n	8001e6e <main+0x76>
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <main+0x114>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0c4      	beq.n	8001e6e <main+0x76>
    			LCD_moveCursor(1, 0);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7fe fc68 	bl	80007bc <LCD_moveCursor>
    			LCD_intgerToString(amount_left);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7fe fcaa 	bl	8000846 <LCD_intgerToString>
    			LCD_displayString(" LE Left");
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <main+0x120>)
 8001ef4:	f7fe fc46 	bl	8000784 <LCD_displayString>
    	if(g_get_amount){
 8001ef8:	e7b9      	b.n	8001e6e <main+0x76>
 8001efa:	bf00      	nop
 8001efc:	08001c21 	.word	0x08001c21
 8001f00:	08001bc9 	.word	0x08001bc9
 8001f04:	08001b71 	.word	0x08001b71
 8001f08:	08001c79 	.word	0x08001c79
 8001f0c:	2000008a 	.word	0x2000008a
 8001f10:	08002138 	.word	0x08002138
 8001f14:	20000000 	.word	0x20000000
 8001f18:	08002144 	.word	0x08002144

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <NMI_Handler+0x4>

08001f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	e7fe      	b.n	8001f2c <MemManage_Handler+0x4>

08001f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <BusFault_Handler+0x4>

08001f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <UsageFault_Handler+0x4>

08001f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fb2:	f7ff ffd7 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f000 f86d 	bl	8002094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fba:	f7ff ff1d 	bl	8001df8 <main>
  bx  lr    
 8001fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001fcc:	0800217c 	.word	0x0800217c
  ldr r2, =_sbss
 8001fd0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001fd4:	2000008c 	.word	0x2000008c

08001fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC_IRQHandler>

08001fda <__itoa>:
 8001fda:	1e93      	subs	r3, r2, #2
 8001fdc:	2b22      	cmp	r3, #34	; 0x22
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	d904      	bls.n	8001fee <__itoa+0x14>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	700b      	strb	r3, [r1, #0]
 8001fe8:	461c      	mov	r4, r3
 8001fea:	4620      	mov	r0, r4
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	2a0a      	cmp	r2, #10
 8001ff0:	d109      	bne.n	8002006 <__itoa+0x2c>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	da07      	bge.n	8002006 <__itoa+0x2c>
 8001ff6:	232d      	movs	r3, #45	; 0x2d
 8001ff8:	700b      	strb	r3, [r1, #0]
 8001ffa:	4240      	negs	r0, r0
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4421      	add	r1, r4
 8002000:	f000 f806 	bl	8002010 <__utoa>
 8002004:	e7f1      	b.n	8001fea <__itoa+0x10>
 8002006:	2100      	movs	r1, #0
 8002008:	e7f9      	b.n	8001ffe <__itoa+0x24>

0800200a <itoa>:
 800200a:	f7ff bfe6 	b.w	8001fda <__itoa>
	...

08002010 <__utoa>:
 8002010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002012:	4c1f      	ldr	r4, [pc, #124]	; (8002090 <__utoa+0x80>)
 8002014:	b08b      	sub	sp, #44	; 0x2c
 8002016:	4605      	mov	r5, r0
 8002018:	460b      	mov	r3, r1
 800201a:	466e      	mov	r6, sp
 800201c:	f104 0c20 	add.w	ip, r4, #32
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	6861      	ldr	r1, [r4, #4]
 8002024:	4637      	mov	r7, r6
 8002026:	c703      	stmia	r7!, {r0, r1}
 8002028:	3408      	adds	r4, #8
 800202a:	4564      	cmp	r4, ip
 800202c:	463e      	mov	r6, r7
 800202e:	d1f7      	bne.n	8002020 <__utoa+0x10>
 8002030:	7921      	ldrb	r1, [r4, #4]
 8002032:	7139      	strb	r1, [r7, #4]
 8002034:	1e91      	subs	r1, r2, #2
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	6038      	str	r0, [r7, #0]
 800203a:	2922      	cmp	r1, #34	; 0x22
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	d904      	bls.n	800204c <__utoa+0x3c>
 8002042:	7019      	strb	r1, [r3, #0]
 8002044:	460b      	mov	r3, r1
 8002046:	4618      	mov	r0, r3
 8002048:	b00b      	add	sp, #44	; 0x2c
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800204c:	1e58      	subs	r0, r3, #1
 800204e:	4684      	mov	ip, r0
 8002050:	fbb5 f7f2 	udiv	r7, r5, r2
 8002054:	fb02 5617 	mls	r6, r2, r7, r5
 8002058:	3628      	adds	r6, #40	; 0x28
 800205a:	446e      	add	r6, sp
 800205c:	460c      	mov	r4, r1
 800205e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002062:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002066:	462e      	mov	r6, r5
 8002068:	42b2      	cmp	r2, r6
 800206a:	f101 0101 	add.w	r1, r1, #1
 800206e:	463d      	mov	r5, r7
 8002070:	d9ee      	bls.n	8002050 <__utoa+0x40>
 8002072:	2200      	movs	r2, #0
 8002074:	545a      	strb	r2, [r3, r1]
 8002076:	1919      	adds	r1, r3, r4
 8002078:	1aa5      	subs	r5, r4, r2
 800207a:	42aa      	cmp	r2, r5
 800207c:	dae3      	bge.n	8002046 <__utoa+0x36>
 800207e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002082:	780e      	ldrb	r6, [r1, #0]
 8002084:	7006      	strb	r6, [r0, #0]
 8002086:	3201      	adds	r2, #1
 8002088:	f801 5901 	strb.w	r5, [r1], #-1
 800208c:	e7f4      	b.n	8002078 <__utoa+0x68>
 800208e:	bf00      	nop
 8002090:	0800214d 	.word	0x0800214d

08002094 <__libc_init_array>:
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	4d0d      	ldr	r5, [pc, #52]	; (80020cc <__libc_init_array+0x38>)
 8002098:	4c0d      	ldr	r4, [pc, #52]	; (80020d0 <__libc_init_array+0x3c>)
 800209a:	1b64      	subs	r4, r4, r5
 800209c:	10a4      	asrs	r4, r4, #2
 800209e:	2600      	movs	r6, #0
 80020a0:	42a6      	cmp	r6, r4
 80020a2:	d109      	bne.n	80020b8 <__libc_init_array+0x24>
 80020a4:	4d0b      	ldr	r5, [pc, #44]	; (80020d4 <__libc_init_array+0x40>)
 80020a6:	4c0c      	ldr	r4, [pc, #48]	; (80020d8 <__libc_init_array+0x44>)
 80020a8:	f000 f818 	bl	80020dc <_init>
 80020ac:	1b64      	subs	r4, r4, r5
 80020ae:	10a4      	asrs	r4, r4, #2
 80020b0:	2600      	movs	r6, #0
 80020b2:	42a6      	cmp	r6, r4
 80020b4:	d105      	bne.n	80020c2 <__libc_init_array+0x2e>
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
 80020b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020bc:	4798      	blx	r3
 80020be:	3601      	adds	r6, #1
 80020c0:	e7ee      	b.n	80020a0 <__libc_init_array+0xc>
 80020c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c6:	4798      	blx	r3
 80020c8:	3601      	adds	r6, #1
 80020ca:	e7f2      	b.n	80020b2 <__libc_init_array+0x1e>
 80020cc:	08002174 	.word	0x08002174
 80020d0:	08002174 	.word	0x08002174
 80020d4:	08002174 	.word	0x08002174
 80020d8:	08002178 	.word	0x08002178

080020dc <_init>:
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	bf00      	nop
 80020e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e2:	bc08      	pop	{r3}
 80020e4:	469e      	mov	lr, r3
 80020e6:	4770      	bx	lr

080020e8 <_fini>:
 80020e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ea:	bf00      	nop
 80020ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ee:	bc08      	pop	{r3}
 80020f0:	469e      	mov	lr, r3
 80020f2:	4770      	bx	lr
