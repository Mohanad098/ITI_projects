
MCU_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800265c  08002664  00012664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800265c  0800265c  00012664  2**0
                  CONTENTS
  4 .ARM          00000000  0800265c  0800265c  00012664  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800265c  08002664  00012664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00012664  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000000  08002664  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002664  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012664  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00012694  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000348e  00000000  00000000  000126d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011af  00000000  00000000  00015b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c8  00000000  00000000  00016d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000363  00000000  00000000  000171e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e3a  00000000  00000000  00017543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000365d  00000000  00000000  0001837d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008071b  00000000  00000000  0001b9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000105c  00000000  00000000  0009c0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0009d154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002644 	.word	0x08002644

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08002644 	.word	0x08002644

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <Comms_Init>:
/*****************************************************************/
/******************** Function Definitions ***********************/
/*****************************************************************/


void Comms_Init(Type_Comms Comms_Type, u16 Baudrate){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	460a      	mov	r2, r1
 80009ba:	71fb      	strb	r3, [r7, #7]
 80009bc:	4613      	mov	r3, r2
 80009be:	80bb      	strh	r3, [r7, #4]
	switch(Comms_Type){
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d120      	bne.n	8000a08 <Comms_Init+0x58>
	case USART_1:
		MRCC_vEnableClock(AHB1, RCC_GPIOA_EN);
 80009c6:	2100      	movs	r1, #0
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 f971 	bl	8001cb0 <MRCC_vEnableClock>
		MRCC_vEnableClock(APB2, RCC_USART1_EN);
 80009ce:	2104      	movs	r1, #4
 80009d0:	2003      	movs	r0, #3
 80009d2:	f001 f96d 	bl	8001cb0 <MRCC_vEnableClock>

		MGPIO_voidSetPinMode(_GPIOA_PORT,  _PIN_9, _MODE_ALTF);
 80009d6:	2202      	movs	r2, #2
 80009d8:	2109      	movs	r1, #9
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fda6 	bl	800152c <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinAltFn(_GPIOA_PORT,  _PIN_9, _ALTFN_7);
 80009e0:	2207      	movs	r2, #7
 80009e2:	2109      	movs	r1, #9
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 ffc9 	bl	800197c <MGPIO_voidSetPinAltFn>

		MGPIO_voidSetPinMode(_GPIOA_PORT,  _PIN_10, _MODE_ALTF);
 80009ea:	2202      	movs	r2, #2
 80009ec:	210a      	movs	r1, #10
 80009ee:	2000      	movs	r0, #0
 80009f0:	f000 fd9c 	bl	800152c <MGPIO_voidSetPinMode>
		MGPIO_voidSetPinAltFn(_GPIOA_PORT,  _PIN_10, _ALTFN_7);
 80009f4:	2207      	movs	r2, #7
 80009f6:	210a      	movs	r1, #10
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 ffbf 	bl	800197c <MGPIO_voidSetPinAltFn>

		MUSART_voidInit(Baudrate);
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fa8d 	bl	8001f20 <MUSART_voidInit>
		break;
 8000a06:	e000      	b.n	8000a0a <Comms_Init+0x5a>
		MGPIO_voidSetPinAltFn(_GPIOE_PORT,  _PIN_14, _ALTFN_5);

		MSPI4_voidInit();
		break;*/
	default:
		break;
 8000a08:	bf00      	nop
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <Comms_Enable_Disable>:

void Comms_Enable_Disable(Type_Comms Comms_Type, u8 Enable_Disable){
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	71fb      	strb	r3, [r7, #7]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	71bb      	strb	r3, [r7, #6]
	if(Enable_Disable){
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d002      	beq.n	8000a2e <Comms_Enable_Disable+0x1c>
		MUSART_voidEnable();
 8000a28:	f001 fb26 	bl	8002078 <MUSART_voidEnable>
	}
	else{
		MUSART_voidDisable();
	}
}
 8000a2c:	e001      	b.n	8000a32 <Comms_Enable_Disable+0x20>
		MUSART_voidDisable();
 8000a2e:	f001 fb33 	bl	8002098 <MUSART_voidDisable>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Comms_Read_Write>:

u8 Comms_Read_Write(Type_Comms Comms_Type, u8* USART_Data, u8 Len, /*u8 SPI_Data,*/ u8 W_R){
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	71bb      	strb	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	717b      	strb	r3, [r7, #5]
	u8 Data_Received = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
	switch(Comms_Type){
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d80d      	bhi.n	8000a78 <Comms_Read_Write+0x3e>
	case USART_1:
	case USART_2:
	case USART_6:
		if(W_R){
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <Comms_Read_Write+0x34>
			MUSART_voidSendData(USART_Data, Len);
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6838      	ldr	r0, [r7, #0]
 8000a68:	f001 fac8 	bl	8001ffc <MUSART_voidSendData>
		}
		else{
			Data_Received = MUSART_u8ReadData();
		}
		break;
 8000a6c:	e005      	b.n	8000a7a <Comms_Read_Write+0x40>
			Data_Received = MUSART_u8ReadData();
 8000a6e:	f001 faeb 	bl	8002048 <MUSART_u8ReadData>
 8000a72:	4603      	mov	r3, r0
 8000a74:	73fb      	strb	r3, [r7, #15]
		break;
 8000a76:	e000      	b.n	8000a7a <Comms_Read_Write+0x40>
		break;
	case SPI_4:
		Data_Received = MSPI4_u8SendData(SPI_Data);
		break;*/
	default:
		break;
 8000a78:	bf00      	nop
	}
	return	Data_Received;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Comms_SetCallBack>:

void Comms_SetCallBack(Type_Comms Comms_Type, void(*Uptr)(void)){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
	switch(Comms_Type){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10e      	bne.n	8000ab4 <Comms_SetCallBack+0x30>
	case USART_1:
		MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 f874 	bl	8001b84 <MNVIC_vSetGroupMode>
		MNVIC_vSetInterruptPriority(37, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2025      	movs	r0, #37	; 0x25
 8000aa2:	f001 f88b 	bl	8001bbc <MNVIC_vSetInterruptPriority>
		MNVIC_vInterruptSetEnable(37);
 8000aa6:	2025      	movs	r0, #37	; 0x25
 8000aa8:	f001 f84c 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MUSART_voidCallBack( Uptr);
 8000aac:	6838      	ldr	r0, [r7, #0]
 8000aae:	f001 fb03 	bl	80020b8 <MUSART_voidCallBack>
		break;
 8000ab2:	e000      	b.n	8000ab6 <Comms_SetCallBack+0x32>
		break;
	case SPI_4:
		MSPI4_voidSetCallBack(Uptr);
		break;*/
	default:
		break;
 8000ab4:	bf00      	nop
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <DC_Motor_Init>:
********************************************************************************************************
********************************************************************************************************/

#include "DC_Motor.h"

void DC_Motor_Init(void){
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
	MGPIO_voidSetPinMode(GATE_IN_MOTOR_PORT,  GATE_IN_MOTOR_IN1, _MODE_OUTPUT);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fd30 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GATE_IN_MOTOR_PORT,  GATE_IN_MOTOR_IN2, _MODE_OUTPUT);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2102      	movs	r1, #2
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 fd2b 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GATE_IN_MOTOR_PORT,  GATE_IN_MOTOR_EN1, _MODE_OUTPUT);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2103      	movs	r1, #3
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 fd26 	bl	800152c <MGPIO_voidSetPinMode>

	MGPIO_voidSetPinMode(GATE_OUT_MOTOR_PORT,  GATE_OUT_MOTOR_IN1, _MODE_OUTPUT);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	210b      	movs	r1, #11
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fd21 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GATE_OUT_MOTOR_PORT,  GATE_OUT_MOTOR_IN2, _MODE_OUTPUT);
 8000aea:	2201      	movs	r2, #1
 8000aec:	210c      	movs	r1, #12
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fd1c 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(GATE_OUT_MOTOR_PORT,  GATE_OUT_MOTOR_EN1, _MODE_OUTPUT);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2108      	movs	r1, #8
 8000af8:	2000      	movs	r0, #0
 8000afa:	f000 fd17 	bl	800152c <MGPIO_voidSetPinMode>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <DC_Motor_Rotate>:

void DC_Motor_Rotate(u8 Gate, DC_Mode Mode){
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	460a      	mov	r2, r1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	71bb      	strb	r3, [r7, #6]
	switch(Gate){
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <DC_Motor_Rotate+0x1c>
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d03c      	beq.n	8000b96 <DC_Motor_Rotate+0x94>
		default:
			break;
		}
		break;
	default:
		break;
 8000b1c:	e077      	b.n	8000c0e <DC_Motor_Rotate+0x10c>
		switch(Mode){
 8000b1e:	79bb      	ldrb	r3, [r7, #6]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d026      	beq.n	8000b72 <DC_Motor_Rotate+0x70>
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	dc34      	bgt.n	8000b92 <DC_Motor_Rotate+0x90>
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <DC_Motor_Rotate+0x30>
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d010      	beq.n	8000b52 <DC_Motor_Rotate+0x50>
			break;
 8000b30:	e02f      	b.n	8000b92 <DC_Motor_Rotate+0x90>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN1, _HIGH);
 8000b32:	2201      	movs	r2, #1
 8000b34:	2101      	movs	r1, #1
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 fe4c 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN2, _LOW);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2102      	movs	r1, #2
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fe47 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_EN1, _HIGH);
 8000b46:	2201      	movs	r2, #1
 8000b48:	2103      	movs	r1, #3
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 fe42 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000b50:	e020      	b.n	8000b94 <DC_Motor_Rotate+0x92>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN1, _LOW);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2101      	movs	r1, #1
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fe3c 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN2, _HIGH);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 fe37 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_EN1, _HIGH);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2103      	movs	r1, #3
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 fe32 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000b70:	e010      	b.n	8000b94 <DC_Motor_Rotate+0x92>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN1, _LOW);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fe2c 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_IN2, _LOW);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2102      	movs	r1, #2
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 fe27 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_IN_MOTOR_PORT, GATE_IN_MOTOR_EN1, _LOW);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2103      	movs	r1, #3
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fe22 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000b90:	e000      	b.n	8000b94 <DC_Motor_Rotate+0x92>
			break;
 8000b92:	bf00      	nop
		break;
 8000b94:	e03b      	b.n	8000c0e <DC_Motor_Rotate+0x10c>
		switch(Mode){
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d026      	beq.n	8000bea <DC_Motor_Rotate+0xe8>
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	dc34      	bgt.n	8000c0a <DC_Motor_Rotate+0x108>
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d002      	beq.n	8000baa <DC_Motor_Rotate+0xa8>
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d010      	beq.n	8000bca <DC_Motor_Rotate+0xc8>
			break;
 8000ba8:	e02f      	b.n	8000c0a <DC_Motor_Rotate+0x108>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN1, _HIGH);
 8000baa:	2201      	movs	r2, #1
 8000bac:	210b      	movs	r1, #11
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fe10 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN2, _LOW);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	210c      	movs	r1, #12
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 fe0b 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_EN1, _HIGH);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 fe06 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000bc8:	e020      	b.n	8000c0c <DC_Motor_Rotate+0x10a>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN1, _LOW);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	210b      	movs	r1, #11
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fe00 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN2, _HIGH);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	210c      	movs	r1, #12
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 fdfb 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_EN1, _HIGH);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2108      	movs	r1, #8
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 fdf6 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000be8:	e010      	b.n	8000c0c <DC_Motor_Rotate+0x10a>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN1, _LOW);
 8000bea:	2200      	movs	r2, #0
 8000bec:	210b      	movs	r1, #11
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fdf0 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_IN2, _LOW);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	210c      	movs	r1, #12
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 fdeb 	bl	80017d4 <MGPIO_voidWriteData>
			MGPIO_voidWriteData(GATE_OUT_MOTOR_PORT, GATE_OUT_MOTOR_EN1, _LOW);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2108      	movs	r1, #8
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fde6 	bl	80017d4 <MGPIO_voidWriteData>
			break;
 8000c08:	e000      	b.n	8000c0c <DC_Motor_Rotate+0x10a>
			break;
 8000c0a:	bf00      	nop
		break;
 8000c0c:	bf00      	nop
	}
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <IR_InterruptInit>:
	MRCC_vEnableClock(AHB1, PORT);
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
	MGPIO_voidSetPullType(PORT, PIN, PULL);
}

void IR_InterruptInit(u8 PORT, u8 PIN, u8 PULL, u8 TRIGGER, void (*IR_ptr)(void), u8 IntGroup_ID, u8 IntPriority_ID){
 8000c16:	b590      	push	{r4, r7, lr}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4604      	mov	r4, r0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	4611      	mov	r1, r2
 8000c22:	461a      	mov	r2, r3
 8000c24:	4623      	mov	r3, r4
 8000c26:	71fb      	strb	r3, [r7, #7]
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71bb      	strb	r3, [r7, #6]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	717b      	strb	r3, [r7, #5]
 8000c30:	4613      	mov	r3, r2
 8000c32:	713b      	strb	r3, [r7, #4]
	MRCC_vEnableClock(AHB1, PORT);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4619      	mov	r1, r3
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f001 f839 	bl	8001cb0 <MRCC_vEnableClock>
	MRCC_vEnableClock(APB2, RCC_SYSCFG_EN);
 8000c3e:	210e      	movs	r1, #14
 8000c40:	2003      	movs	r0, #3
 8000c42:	f001 f835 	bl	8001cb0 <MRCC_vEnableClock>
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
 8000c46:	79b9      	ldrb	r1, [r7, #6]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fc6d 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(PORT, PIN, PULL);
 8000c52:	79b9      	ldrb	r1, [r7, #6]
 8000c54:	797a      	ldrb	r2, [r7, #5]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 fcdf 	bl	800161c <MGPIO_voidSetPullType>
	MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 8000c5e:	2005      	movs	r0, #5
 8000c60:	f000 ff90 	bl	8001b84 <MNVIC_vSetGroupMode>
	if(PIN < 5){
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d80f      	bhi.n	8000c8a <IR_InterruptInit+0x74>
		MNVIC_vInterruptSetEnable(PIN + 6);
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 ff67 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(PIN + 6, IntGroup_ID, IntPriority_ID);
 8000c76:	79bb      	ldrb	r3, [r7, #6]
 8000c78:	3306      	adds	r3, #6
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c80:	7f39      	ldrb	r1, [r7, #28]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 ff9a 	bl	8001bbc <MNVIC_vSetInterruptPriority>
 8000c88:	e01a      	b.n	8000cc0 <IR_InterruptInit+0xaa>
	}
	else if(PIN < 10){
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	d80a      	bhi.n	8000ca6 <IR_InterruptInit+0x90>
		/* EXTI5-9 are at Position 23*/
		MNVIC_vInterruptSetEnable(23);
 8000c90:	2017      	movs	r0, #23
 8000c92:	f000 ff57 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(23, IntGroup_ID, IntPriority_ID);
 8000c96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c9a:	7f3b      	ldrb	r3, [r7, #28]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2017      	movs	r0, #23
 8000ca0:	f000 ff8c 	bl	8001bbc <MNVIC_vSetInterruptPriority>
 8000ca4:	e00c      	b.n	8000cc0 <IR_InterruptInit+0xaa>
	}
	else if (PIN < 16){
 8000ca6:	79bb      	ldrb	r3, [r7, #6]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d809      	bhi.n	8000cc0 <IR_InterruptInit+0xaa>
		/* EXTI10-15 are at Position 40*/
		MNVIC_vInterruptSetEnable(40);
 8000cac:	2028      	movs	r0, #40	; 0x28
 8000cae:	f000 ff49 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(40, IntGroup_ID, IntPriority_ID);
 8000cb2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cb6:	7f3b      	ldrb	r3, [r7, #28]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2028      	movs	r0, #40	; 0x28
 8000cbc:	f000 ff7e 	bl	8001bbc <MNVIC_vSetInterruptPriority>
	}
	MEXTI_vHWInterruptEnable(PIN);
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f8c4 	bl	8000e50 <MEXTI_vHWInterruptEnable>
	MEXTI_vSetTriggerType(PIN, TRIGGER);
 8000cc8:	793a      	ldrb	r2, [r7, #4]
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8d6 	bl	8000e80 <MEXTI_vSetTriggerType>
	MEXTI_vSetExtiConfig(PIN, ((PORT == _GPIOH_PORT)? PORT += 2 : PORT) );
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d104      	bne.n	8000ce4 <IR_InterruptInit+0xce>
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	e000      	b.n	8000ce6 <IR_InterruptInit+0xd0>
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	79ba      	ldrb	r2, [r7, #6]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4610      	mov	r0, r2
 8000cec:	f000 f90e 	bl	8000f0c <MEXTI_vSetExtiConfig>
	MEXTI_vSetCallback(PIN, IR_ptr);
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fa59 	bl	80011ac <MEXTI_vSetCallback>
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}

08000d02 <PB_Init>:
********************************************************************************************************
********************************************************************************************************/

#include "../Push_Button/PB_Control.h"

void PB_Init(u8 PORT, u8 PIN, u8 PULL){
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	71bb      	strb	r3, [r7, #6]
 8000d10:	4613      	mov	r3, r2
 8000d12:	717b      	strb	r3, [r7, #5]
	MRCC_vEnableClock(AHB1, PORT);
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 ffc9 	bl	8001cb0 <MRCC_vEnableClock>
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
 8000d1e:	79b9      	ldrb	r1, [r7, #6]
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2200      	movs	r2, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fc01 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(PORT, PIN, PULL);
 8000d2a:	79b9      	ldrb	r1, [r7, #6]
 8000d2c:	797a      	ldrb	r2, [r7, #5]
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 fc73 	bl	800161c <MGPIO_voidSetPullType>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <PB_InterruptInit>:

void PB_InterruptInit(u8 PORT, u8 PIN, u8 PULL, u8 TRIGGER, void (*PB_ptr)(void), u8 IntGroup_ID, u8 IntPriority_ID){
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4604      	mov	r4, r0
 8000d46:	4608      	mov	r0, r1
 8000d48:	4611      	mov	r1, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4623      	mov	r3, r4
 8000d4e:	71fb      	strb	r3, [r7, #7]
 8000d50:	4603      	mov	r3, r0
 8000d52:	71bb      	strb	r3, [r7, #6]
 8000d54:	460b      	mov	r3, r1
 8000d56:	717b      	strb	r3, [r7, #5]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	713b      	strb	r3, [r7, #4]
	MRCC_vEnableClock(AHB1, PORT);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 ffa5 	bl	8001cb0 <MRCC_vEnableClock>
	MRCC_vEnableClock(APB2, RCC_SYSCFG_EN);
 8000d66:	210e      	movs	r1, #14
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 ffa1 	bl	8001cb0 <MRCC_vEnableClock>
	MGPIO_voidSetPinMode(PORT, PIN, _MODE_INPUT);
 8000d6e:	79b9      	ldrb	r1, [r7, #6]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2200      	movs	r2, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 fbd9 	bl	800152c <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullType(PORT, PIN, PULL);
 8000d7a:	79b9      	ldrb	r1, [r7, #6]
 8000d7c:	797a      	ldrb	r2, [r7, #5]
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fc4b 	bl	800161c <MGPIO_voidSetPullType>
	MNVIC_vSetGroupMode(MNVIC_G4_SG4);
 8000d86:	2005      	movs	r0, #5
 8000d88:	f000 fefc 	bl	8001b84 <MNVIC_vSetGroupMode>
	if(PIN < 5){
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d80f      	bhi.n	8000db2 <PB_InterruptInit+0x74>
		MNVIC_vInterruptSetEnable(PIN + 6);
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	3306      	adds	r3, #6
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 fed3 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(PIN + 6, IntGroup_ID, IntPriority_ID);
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	3306      	adds	r3, #6
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000da8:	7f39      	ldrb	r1, [r7, #28]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 ff06 	bl	8001bbc <MNVIC_vSetInterruptPriority>
 8000db0:	e01a      	b.n	8000de8 <PB_InterruptInit+0xaa>
	}
	else if(PIN < 10){
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b09      	cmp	r3, #9
 8000db6:	d80a      	bhi.n	8000dce <PB_InterruptInit+0x90>
		/* EXTI5-9 are at Position 23*/
		MNVIC_vInterruptSetEnable(23);
 8000db8:	2017      	movs	r0, #23
 8000dba:	f000 fec3 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(23, IntGroup_ID, IntPriority_ID);
 8000dbe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dc2:	7f3b      	ldrb	r3, [r7, #28]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2017      	movs	r0, #23
 8000dc8:	f000 fef8 	bl	8001bbc <MNVIC_vSetInterruptPriority>
 8000dcc:	e00c      	b.n	8000de8 <PB_InterruptInit+0xaa>
	}
	else if (PIN < 16){
 8000dce:	79bb      	ldrb	r3, [r7, #6]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d809      	bhi.n	8000de8 <PB_InterruptInit+0xaa>
		/* EXTI10-15 are at Position 40*/
		MNVIC_vInterruptSetEnable(40);
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f000 feb5 	bl	8001b44 <MNVIC_vInterruptSetEnable>
		MNVIC_vSetInterruptPriority(40, IntGroup_ID, IntPriority_ID);
 8000dda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dde:	7f3b      	ldrb	r3, [r7, #28]
 8000de0:	4619      	mov	r1, r3
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f000 feea 	bl	8001bbc <MNVIC_vSetInterruptPriority>
	}
	MEXTI_vHWInterruptEnable(PIN);
 8000de8:	79bb      	ldrb	r3, [r7, #6]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f830 	bl	8000e50 <MEXTI_vHWInterruptEnable>
	MEXTI_vSetTriggerType(PIN, TRIGGER);
 8000df0:	793a      	ldrb	r2, [r7, #4]
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f842 	bl	8000e80 <MEXTI_vSetTriggerType>
	MEXTI_vSetExtiConfig(PIN, ((PORT == _GPIOH_PORT)? PORT += 2 : PORT) );
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	d104      	bne.n	8000e0c <PB_InterruptInit+0xce>
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3302      	adds	r3, #2
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	e000      	b.n	8000e0e <PB_InterruptInit+0xd0>
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f000 f87a 	bl	8000f0c <MEXTI_vSetExtiConfig>
	MEXTI_vSetCallback(PIN, PB_ptr);
 8000e18:	79bb      	ldrb	r3, [r7, #6]
 8000e1a:	69b9      	ldr	r1, [r7, #24]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 f9c5 	bl	80011ac <MEXTI_vSetCallback>
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}

08000e2a <PB_Read>:

u8 PB_Read(u8 PORT, u8 PIN){
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	460a      	mov	r2, r1
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	4613      	mov	r3, r2
 8000e38:	71bb      	strb	r3, [r7, #6]
	return MGPIO_u8ReadData(PORT, PIN);
 8000e3a:	79ba      	ldrb	r2, [r7, #6]
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fc5b 	bl	80016fc <MGPIO_u8ReadData>
 8000e46:	4603      	mov	r3, r0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <MEXTI_vHWInterruptEnable>:
/* 1- Function Description -> Function to Set the Interrupt mask on for the required Line              */
/* 2- Function Input       -> LINE                                                                     */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vHWInterruptEnable(EXTI_Line_x LINE){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI -> IMR , LINE);
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MEXTI_vHWInterruptEnable+0x2c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	79fa      	ldrb	r2, [r7, #7]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <MEXTI_vHWInterruptEnable+0x2c>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40013c00 	.word	0x40013c00

08000e80 <MEXTI_vSetTriggerType>:
/* 1- Function Description -> Function to set the trigger type the interrupt/event will activate on    */
/* 2- Function Input       -> LINE, Trigger              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetTriggerType(EXTI_Line_x LINE, EXTI_Trigger Trigger){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	switch (Trigger){
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d01c      	beq.n	8000ed0 <MEXTI_vSetTriggerType+0x50>
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	dc2f      	bgt.n	8000efa <MEXTI_vSetTriggerType+0x7a>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <MEXTI_vSetTriggerType+0x24>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d00b      	beq.n	8000eba <MEXTI_vSetTriggerType+0x3a>
	case Any_Change:
		SET_BIT(EXTI -> RSTR , LINE);
		SET_BIT(EXTI -> FSTR , LINE);
		break;
	default:
		break;
 8000ea2:	e02a      	b.n	8000efa <MEXTI_vSetTriggerType+0x7a>
		SET_BIT(EXTI -> RSTR , LINE);
 8000ea4:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	79fa      	ldrb	r2, [r7, #7]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6093      	str	r3, [r2, #8]
		break;
 8000eb8:	e020      	b.n	8000efc <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> FSTR , LINE);
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	79fa      	ldrb	r2, [r7, #7]
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	60d3      	str	r3, [r2, #12]
		break;
 8000ece:	e015      	b.n	8000efc <MEXTI_vSetTriggerType+0x7c>
		SET_BIT(EXTI -> RSTR , LINE);
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	79fa      	ldrb	r2, [r7, #7]
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8000edc:	4611      	mov	r1, r2
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ee0:	430b      	orrs	r3, r1
 8000ee2:	6093      	str	r3, [r2, #8]
		SET_BIT(EXTI -> FSTR , LINE);
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	2101      	movs	r1, #1
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <MEXTI_vSetTriggerType+0x88>)
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	60d3      	str	r3, [r2, #12]
		break;
 8000ef8:	e000      	b.n	8000efc <MEXTI_vSetTriggerType+0x7c>
		break;
 8000efa:	bf00      	nop
	}
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <MEXTI_vSetExtiConfig>:
/*                            system configuration                                                     */
/* 2- Function Input       -> LINE, PORT              											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetExtiConfig(EXTI_Line_x LINE, SYSCFG_Port PORT){
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
	u8 CRx  = LINE / 4;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	73fb      	strb	r3, [r7, #15]
	u8 line = LINE % 4;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	73bb      	strb	r3, [r7, #14]
	switch (CRx) {
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	f200 8133 	bhi.w	8001198 <MEXTI_vSetExtiConfig+0x28c>
 8000f32:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <MEXTI_vSetExtiConfig+0x2c>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08000fdd 	.word	0x08000fdd
 8000f40:	08001071 	.word	0x08001071
 8000f44:	08001105 	.word	0x08001105
	case 0:
		switch (line){
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d844      	bhi.n	8000fd8 <MEXTI_vSetExtiConfig+0xcc>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <MEXTI_vSetExtiConfig+0x48>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f7f 	.word	0x08000f7f
 8000f5c:	08000f9d 	.word	0x08000f9d
 8000f60:	08000fbb 	.word	0x08000fbb
		case 0:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK1;
 8000f64:	4b90      	ldr	r3, [pc, #576]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a8f      	ldr	r2, [pc, #572]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f6a:	f023 030f 	bic.w	r3, r3, #15
 8000f6e:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= PORT;
 8000f70:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	498c      	ldr	r1, [pc, #560]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	600b      	str	r3, [r1, #0]
			break;
 8000f7c:	e02d      	b.n	8000fda <MEXTI_vSetExtiConfig+0xce>
		case 1:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK2;
 8000f7e:	4b8a      	ldr	r3, [pc, #552]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a89      	ldr	r2, [pc, #548]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f88:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT <<4);
 8000f8a:	4b87      	ldr	r3, [pc, #540]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	79ba      	ldrb	r2, [r7, #6]
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a84      	ldr	r2, [pc, #528]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
			break;
 8000f9a:	e01e      	b.n	8000fda <MEXTI_vSetExtiConfig+0xce>
		case 2:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK3;
 8000f9c:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a81      	ldr	r2, [pc, #516]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fa6:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 8);
 8000fa8:	4b7f      	ldr	r3, [pc, #508]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	0212      	lsls	r2, r2, #8
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	4a7d      	ldr	r2, [pc, #500]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
			break;
 8000fb8:	e00f      	b.n	8000fda <MEXTI_vSetExtiConfig+0xce>
		case 3:
			SYSCFG -> EXTICR1 &= EXTI_CONFG_MASK4;
 8000fba:	4b7b      	ldr	r3, [pc, #492]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7a      	ldr	r2, [pc, #488]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000fc4:	6013      	str	r3, [r2, #0]
			SYSCFG -> EXTICR1 |= (PORT << 12);
 8000fc6:	4b78      	ldr	r3, [pc, #480]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	79ba      	ldrb	r2, [r7, #6]
 8000fcc:	0312      	lsls	r2, r2, #12
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	6013      	str	r3, [r2, #0]
			break;
 8000fd6:	e000      	b.n	8000fda <MEXTI_vSetExtiConfig+0xce>
		default:
			break;
 8000fd8:	bf00      	nop
		}
		break;
 8000fda:	e0de      	b.n	800119a <MEXTI_vSetExtiConfig+0x28e>
	case 1:
		switch (line){
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d844      	bhi.n	800106c <MEXTI_vSetExtiConfig+0x160>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <MEXTI_vSetExtiConfig+0xdc>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	08001013 	.word	0x08001013
 8000ff0:	08001031 	.word	0x08001031
 8000ff4:	0800104f 	.word	0x0800104f
		case 0:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK1;
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a6a      	ldr	r2, [pc, #424]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= PORT;
 8001004:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	79bb      	ldrb	r3, [r7, #6]
 800100a:	4967      	ldr	r1, [pc, #412]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
			break;
 8001010:	e02d      	b.n	800106e <MEXTI_vSetExtiConfig+0x162>
		case 1:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK2;
 8001012:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800101c:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT <<4);
 800101e:	4b62      	ldr	r3, [pc, #392]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	79ba      	ldrb	r2, [r7, #6]
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	4611      	mov	r1, r2
 8001028:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800102a:	430b      	orrs	r3, r1
 800102c:	6053      	str	r3, [r2, #4]
			break;
 800102e:	e01e      	b.n	800106e <MEXTI_vSetExtiConfig+0x162>
		case 2:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK3;
 8001030:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a5c      	ldr	r2, [pc, #368]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001036:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800103a:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 8);
 800103c:	4b5a      	ldr	r3, [pc, #360]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	79ba      	ldrb	r2, [r7, #6]
 8001042:	0212      	lsls	r2, r2, #8
 8001044:	4611      	mov	r1, r2
 8001046:	4a58      	ldr	r2, [pc, #352]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001048:	430b      	orrs	r3, r1
 800104a:	6053      	str	r3, [r2, #4]
			break;
 800104c:	e00f      	b.n	800106e <MEXTI_vSetExtiConfig+0x162>
		case 3:
			SYSCFG -> EXTICR2 &= EXTI_CONFG_MASK4;
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a55      	ldr	r2, [pc, #340]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001054:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001058:	6053      	str	r3, [r2, #4]
			SYSCFG -> EXTICR2 |= (PORT << 12);
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	0312      	lsls	r2, r2, #12
 8001062:	4611      	mov	r1, r2
 8001064:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001066:	430b      	orrs	r3, r1
 8001068:	6053      	str	r3, [r2, #4]
			break;
 800106a:	e000      	b.n	800106e <MEXTI_vSetExtiConfig+0x162>
		default:
			break;
 800106c:	bf00      	nop
		}
		break;
 800106e:	e094      	b.n	800119a <MEXTI_vSetExtiConfig+0x28e>
	case 2:
		switch (line){
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d844      	bhi.n	8001100 <MEXTI_vSetExtiConfig+0x1f4>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <MEXTI_vSetExtiConfig+0x170>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	080010a7 	.word	0x080010a7
 8001084:	080010c5 	.word	0x080010c5
 8001088:	080010e3 	.word	0x080010e3
		case 0:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK1;
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= PORT;
 8001098:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	4942      	ldr	r1, [pc, #264]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
			break;
 80010a4:	e02d      	b.n	8001102 <MEXTI_vSetExtiConfig+0x1f6>
		case 1:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK2;
 80010a6:	4b40      	ldr	r3, [pc, #256]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4a3f      	ldr	r2, [pc, #252]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010b0:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT <<4);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	79ba      	ldrb	r2, [r7, #6]
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	4611      	mov	r1, r2
 80010bc:	4a3a      	ldr	r2, [pc, #232]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010be:	430b      	orrs	r3, r1
 80010c0:	6093      	str	r3, [r2, #8]
			break;
 80010c2:	e01e      	b.n	8001102 <MEXTI_vSetExtiConfig+0x1f6>
		case 2:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK3;
 80010c4:	4b38      	ldr	r3, [pc, #224]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	4a37      	ldr	r2, [pc, #220]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010ce:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 8);
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	79ba      	ldrb	r2, [r7, #6]
 80010d6:	0212      	lsls	r2, r2, #8
 80010d8:	4611      	mov	r1, r2
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	6093      	str	r3, [r2, #8]
			break;
 80010e0:	e00f      	b.n	8001102 <MEXTI_vSetExtiConfig+0x1f6>
		case 3:
			SYSCFG -> EXTICR3 &= EXTI_CONFG_MASK4;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80010ec:	6093      	str	r3, [r2, #8]
			SYSCFG -> EXTICR3 |= (PORT << 12);
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	0312      	lsls	r2, r2, #12
 80010f6:	4611      	mov	r1, r2
 80010f8:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 80010fa:	430b      	orrs	r3, r1
 80010fc:	6093      	str	r3, [r2, #8]
			break;
 80010fe:	e000      	b.n	8001102 <MEXTI_vSetExtiConfig+0x1f6>
		default:
			break;
 8001100:	bf00      	nop
		}
		break;
 8001102:	e04a      	b.n	800119a <MEXTI_vSetExtiConfig+0x28e>
	case 3:
		switch (line){
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d844      	bhi.n	8001194 <MEXTI_vSetExtiConfig+0x288>
 800110a:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <MEXTI_vSetExtiConfig+0x204>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001121 	.word	0x08001121
 8001114:	0800113b 	.word	0x0800113b
 8001118:	08001159 	.word	0x08001159
 800111c:	08001177 	.word	0x08001177
		case 0:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK1;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	4a20      	ldr	r2, [pc, #128]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001126:	f023 030f 	bic.w	r3, r3, #15
 800112a:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= PORT;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	491d      	ldr	r1, [pc, #116]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	60cb      	str	r3, [r1, #12]
			break;
 8001138:	e02d      	b.n	8001196 <MEXTI_vSetExtiConfig+0x28a>
		case 1:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK2;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	4a1a      	ldr	r2, [pc, #104]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001140:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001144:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT <<4);
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	79ba      	ldrb	r2, [r7, #6]
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	4611      	mov	r1, r2
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001152:	430b      	orrs	r3, r1
 8001154:	60d3      	str	r3, [r2, #12]
			break;
 8001156:	e01e      	b.n	8001196 <MEXTI_vSetExtiConfig+0x28a>
		case 2:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK3;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800115e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001162:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 8);
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	0212      	lsls	r2, r2, #8
 800116c:	4611      	mov	r1, r2
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001170:	430b      	orrs	r3, r1
 8001172:	60d3      	str	r3, [r2, #12]
			break;
 8001174:	e00f      	b.n	8001196 <MEXTI_vSetExtiConfig+0x28a>
		case 3:
			SYSCFG -> EXTICR4 &= EXTI_CONFG_MASK4;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800117c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001180:	60d3      	str	r3, [r2, #12]
			SYSCFG -> EXTICR4 |= (PORT << 12);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	79ba      	ldrb	r2, [r7, #6]
 8001188:	0312      	lsls	r2, r2, #12
 800118a:	4611      	mov	r1, r2
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <MEXTI_vSetExtiConfig+0x29c>)
 800118e:	430b      	orrs	r3, r1
 8001190:	60d3      	str	r3, [r2, #12]
			break;
 8001192:	e000      	b.n	8001196 <MEXTI_vSetExtiConfig+0x28a>
		default:
			break;
 8001194:	bf00      	nop
		}
		break;
 8001196:	e000      	b.n	800119a <MEXTI_vSetExtiConfig+0x28e>
	default:
		break;
 8001198:	bf00      	nop
	}
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40013808 	.word	0x40013808

080011ac <MEXTI_vSetCallback>:
/* 1- Function Description -> Function to set the callback function to the line it will correspond to  */
/* 2- Function Input       -> LINE, *ptr()              											   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MEXTI_vSetCallback(EXTI_Line_x LINE, void(*ptr)(void)){
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
	switch (LINE) {
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d862      	bhi.n	8001284 <MEXTI_vSetCallback+0xd8>
 80011be:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <MEXTI_vSetCallback+0x18>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	08001205 	.word	0x08001205
 80011c8:	0800120d 	.word	0x0800120d
 80011cc:	08001215 	.word	0x08001215
 80011d0:	0800121d 	.word	0x0800121d
 80011d4:	08001225 	.word	0x08001225
 80011d8:	0800122d 	.word	0x0800122d
 80011dc:	08001235 	.word	0x08001235
 80011e0:	0800123d 	.word	0x0800123d
 80011e4:	08001245 	.word	0x08001245
 80011e8:	0800124d 	.word	0x0800124d
 80011ec:	08001255 	.word	0x08001255
 80011f0:	0800125d 	.word	0x0800125d
 80011f4:	08001265 	.word	0x08001265
 80011f8:	0800126d 	.word	0x0800126d
 80011fc:	08001275 	.word	0x08001275
 8001200:	0800127d 	.word	0x0800127d
	case EXTI_Line_0:
		EXTI0_Callback =ptr;
 8001204:	4a23      	ldr	r2, [pc, #140]	; (8001294 <MEXTI_vSetCallback+0xe8>)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	6013      	str	r3, [r2, #0]
		break;
 800120a:	e03c      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_1:
		EXTI1_Callback =ptr;
 800120c:	4a22      	ldr	r2, [pc, #136]	; (8001298 <MEXTI_vSetCallback+0xec>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6013      	str	r3, [r2, #0]
		break;
 8001212:	e038      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_2:
		EXTI2_Callback =ptr;
 8001214:	4a21      	ldr	r2, [pc, #132]	; (800129c <MEXTI_vSetCallback+0xf0>)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6013      	str	r3, [r2, #0]
		break;
 800121a:	e034      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_3:
		EXTI3_Callback =ptr;
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <MEXTI_vSetCallback+0xf4>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6013      	str	r3, [r2, #0]
		break;
 8001222:	e030      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_4:
		EXTI4_Callback =ptr;
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <MEXTI_vSetCallback+0xf8>)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6013      	str	r3, [r2, #0]
		break;
 800122a:	e02c      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_5:
		EXTI5_Callback =ptr;
 800122c:	4a1e      	ldr	r2, [pc, #120]	; (80012a8 <MEXTI_vSetCallback+0xfc>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	6013      	str	r3, [r2, #0]
		break;
 8001232:	e028      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_6:
		EXTI6_Callback =ptr;
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <MEXTI_vSetCallback+0x100>)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6013      	str	r3, [r2, #0]
		break;
 800123a:	e024      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_7:
		EXTI7_Callback =ptr;
 800123c:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <MEXTI_vSetCallback+0x104>)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6013      	str	r3, [r2, #0]
		break;
 8001242:	e020      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_8:
		EXTI8_Callback =ptr;
 8001244:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <MEXTI_vSetCallback+0x108>)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	6013      	str	r3, [r2, #0]
		break;
 800124a:	e01c      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_9:
		EXTI9_Callback =ptr;
 800124c:	4a1a      	ldr	r2, [pc, #104]	; (80012b8 <MEXTI_vSetCallback+0x10c>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6013      	str	r3, [r2, #0]
		break;
 8001252:	e018      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_10:
		EXTI10_Callback =ptr;
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <MEXTI_vSetCallback+0x110>)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	6013      	str	r3, [r2, #0]
		break;
 800125a:	e014      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_11:
		EXTI11_Callback =ptr;
 800125c:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <MEXTI_vSetCallback+0x114>)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	6013      	str	r3, [r2, #0]
		break;
 8001262:	e010      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_12:
		EXTI12_Callback =ptr;
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MEXTI_vSetCallback+0x118>)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	6013      	str	r3, [r2, #0]
		break;
 800126a:	e00c      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_13:
		EXTI13_Callback =ptr;
 800126c:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <MEXTI_vSetCallback+0x11c>)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	6013      	str	r3, [r2, #0]
		break;
 8001272:	e008      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_14:
		EXTI14_Callback =ptr;
 8001274:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MEXTI_vSetCallback+0x120>)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6013      	str	r3, [r2, #0]
		break;
 800127a:	e004      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	case EXTI_Line_15:
		EXTI15_Callback =ptr;
 800127c:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <MEXTI_vSetCallback+0x124>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6013      	str	r3, [r2, #0]
		break;
 8001282:	e000      	b.n	8001286 <MEXTI_vSetCallback+0xda>
	default:
		break;
 8001284:	bf00      	nop
	}
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000001c 	.word	0x2000001c
 8001298:	20000020 	.word	0x20000020
 800129c:	20000024 	.word	0x20000024
 80012a0:	20000028 	.word	0x20000028
 80012a4:	2000002c 	.word	0x2000002c
 80012a8:	20000030 	.word	0x20000030
 80012ac:	20000034 	.word	0x20000034
 80012b0:	20000038 	.word	0x20000038
 80012b4:	2000003c 	.word	0x2000003c
 80012b8:	20000040 	.word	0x20000040
 80012bc:	20000044 	.word	0x20000044
 80012c0:	20000048 	.word	0x20000048
 80012c4:	2000004c 	.word	0x2000004c
 80012c8:	20000050 	.word	0x20000050
 80012cc:	20000054 	.word	0x20000054
 80012d0:	20000058 	.word	0x20000058

080012d4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	EXTI0_Callback();
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <EXTI0_IRQHandler+0x1c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_0);
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <EXTI0_IRQHandler+0x20>)
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <EXTI0_IRQHandler+0x20>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6153      	str	r3, [r2, #20]
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000001c 	.word	0x2000001c
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	EXTI1_Callback();
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <EXTI1_IRQHandler+0x1c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_1);
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <EXTI1_IRQHandler+0x20>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <EXTI1_IRQHandler+0x20>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6153      	str	r3, [r2, #20]
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000020 	.word	0x20000020
 8001318:	40013c00 	.word	0x40013c00

0800131c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	EXTI2_Callback();
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <EXTI2_IRQHandler+0x1c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_2);
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <EXTI2_IRQHandler+0x20>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <EXTI2_IRQHandler+0x20>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6153      	str	r3, [r2, #20]
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000024 	.word	0x20000024
 800133c:	40013c00 	.word	0x40013c00

08001340 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	EXTI3_Callback();
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <EXTI3_IRQHandler+0x1c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_3);
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <EXTI3_IRQHandler+0x20>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <EXTI3_IRQHandler+0x20>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6153      	str	r3, [r2, #20]
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000028 	.word	0x20000028
 8001360:	40013c00 	.word	0x40013c00

08001364 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	EXTI4_Callback();
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <EXTI4_IRQHandler+0x1c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4798      	blx	r3
	SET_BIT(EXTI -> PR, EXTI_Line_4);
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <EXTI4_IRQHandler+0x20>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <EXTI4_IRQHandler+0x20>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6153      	str	r3, [r2, #20]
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2000002c 	.word	0x2000002c
 8001384:	40013c00 	.word	0x40013c00

08001388 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI -> PR, EXTI_Line_5)){
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <EXTI9_5_IRQHandler+0x24>
		EXTI5_Callback();
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <EXTI9_5_IRQHandler+0xac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_5);
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	6153      	str	r3, [r2, #20]
	}
	else if(GET_BIT(EXTI -> PR, EXTI_Line_9)){
		EXTI9_Callback();
		SET_BIT(EXTI -> PR, EXTI_Line_9);
	}
}
 80013aa:	e03e      	b.n	800142a <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_6)){
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <EXTI9_5_IRQHandler+0x44>
		EXTI6_Callback();
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <EXTI9_5_IRQHandler+0xb0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_6);
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c8:	6153      	str	r3, [r2, #20]
}
 80013ca:	e02e      	b.n	800142a <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_7)){
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d009      	beq.n	80013ec <EXTI9_5_IRQHandler+0x64>
		EXTI7_Callback();
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <EXTI9_5_IRQHandler+0xb4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_7);
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	4a13      	ldr	r2, [pc, #76]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e8:	6153      	str	r3, [r2, #20]
}
 80013ea:	e01e      	b.n	800142a <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_8)){
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d009      	beq.n	800140c <EXTI9_5_IRQHandler+0x84>
		EXTI8_Callback();
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <EXTI9_5_IRQHandler+0xb8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_8);
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001408:	6153      	str	r3, [r2, #20]
}
 800140a:	e00e      	b.n	800142a <EXTI9_5_IRQHandler+0xa2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_9)){
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <EXTI9_5_IRQHandler+0xa2>
		EXTI9_Callback();
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <EXTI9_5_IRQHandler+0xbc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_9);
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	4a03      	ldr	r2, [pc, #12]	; (8001430 <EXTI9_5_IRQHandler+0xa8>)
 8001424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001428:	6153      	str	r3, [r2, #20]
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40013c00 	.word	0x40013c00
 8001434:	20000030 	.word	0x20000030
 8001438:	20000034 	.word	0x20000034
 800143c:	20000038 	.word	0x20000038
 8001440:	2000003c 	.word	0x2000003c
 8001444:	20000040 	.word	0x20000040

08001448 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI -> PR, EXTI_Line_10)){
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <EXTI15_10_IRQHandler+0x24>
		EXTI10_Callback();
 8001458:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <EXTI15_10_IRQHandler+0xcc>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_10);
 800145e:	4b2c      	ldr	r3, [pc, #176]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001468:	6153      	str	r3, [r2, #20]
	}
	else if(GET_BIT(EXTI -> PR, EXTI_Line_15)){
		EXTI15_Callback();
		SET_BIT(EXTI -> PR, EXTI_Line_15);
	}
}
 800146a:	e04e      	b.n	800150a <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_11)){
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 800146e:	695b      	ldr	r3, [r3, #20]
 8001470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <EXTI15_10_IRQHandler+0x44>
		EXTI11_Callback();
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <EXTI15_10_IRQHandler+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_11);
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4a23      	ldr	r2, [pc, #140]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001488:	6153      	str	r3, [r2, #20]
}
 800148a:	e03e      	b.n	800150a <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_12)){
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <EXTI15_10_IRQHandler+0x64>
		EXTI12_Callback();
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <EXTI15_10_IRQHandler+0xd4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_12);
 800149e:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a8:	6153      	str	r3, [r2, #20]
}
 80014aa:	e02e      	b.n	800150a <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_13)){
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <EXTI15_10_IRQHandler+0x84>
		EXTI13_Callback();
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <EXTI15_10_IRQHandler+0xd8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_13);
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a13      	ldr	r2, [pc, #76]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c8:	6153      	str	r3, [r2, #20]
}
 80014ca:	e01e      	b.n	800150a <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_14)){
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <EXTI15_10_IRQHandler+0xa4>
		EXTI14_Callback();
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <EXTI15_10_IRQHandler+0xdc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_14);
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6153      	str	r3, [r2, #20]
}
 80014ea:	e00e      	b.n	800150a <EXTI15_10_IRQHandler+0xc2>
	else if(GET_BIT(EXTI -> PR, EXTI_Line_15)){
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <EXTI15_10_IRQHandler+0xc2>
		EXTI15_Callback();
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <EXTI15_10_IRQHandler+0xe0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4798      	blx	r3
		SET_BIT(EXTI -> PR, EXTI_Line_15);
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <EXTI15_10_IRQHandler+0xc8>)
 8001504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001508:	6153      	str	r3, [r2, #20]
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40013c00 	.word	0x40013c00
 8001514:	20000044 	.word	0x20000044
 8001518:	20000048 	.word	0x20000048
 800151c:	2000004c 	.word	0x2000004c
 8001520:	20000050 	.word	0x20000050
 8001524:	20000054 	.word	0x20000054
 8001528:	20000058 	.word	0x20000058

0800152c <MGPIO_voidSetPinMode>:
/*      4- MODE_ANALOG                                                                                 */
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  ){
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
 8001536:	460b      	mov	r3, r1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	4613      	mov	r3, r2
 800153c:	717b      	strb	r3, [r7, #5]
	
	switch(Copy_u8PortName)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d857      	bhi.n	80015f4 <MGPIO_voidSetPinMode+0xc8>
 8001544:	a201      	add	r2, pc, #4	; (adr r2, 800154c <MGPIO_voidSetPinMode+0x20>)
 8001546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800154a:	bf00      	nop
 800154c:	08001565 	.word	0x08001565
 8001550:	0800157d 	.word	0x0800157d
 8001554:	08001595 	.word	0x08001595
 8001558:	080015ad 	.word	0x080015ad
 800155c:	080015c5 	.word	0x080015c5
 8001560:	080015dd 	.word	0x080015dd
	{
	  case _GPIOA_PORT : MGPIOA->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <MGPIO_voidSetPinMode+0xd8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	7979      	ldrb	r1, [r7, #5]
 800156a:	79ba      	ldrb	r2, [r7, #6]
 800156c:	0052      	lsls	r2, r2, #1
 800156e:	fa01 f202 	lsl.w	r2, r1, r2
 8001572:	4611      	mov	r1, r2
 8001574:	4a23      	ldr	r2, [pc, #140]	; (8001604 <MGPIO_voidSetPinMode+0xd8>)
 8001576:	430b      	orrs	r3, r1
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e03c      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOB_PORT : MGPIOB->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MGPIO_voidSetPinMode+0xdc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	7979      	ldrb	r1, [r7, #5]
 8001582:	79ba      	ldrb	r2, [r7, #6]
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	fa01 f202 	lsl.w	r2, r1, r2
 800158a:	4611      	mov	r1, r2
 800158c:	4a1e      	ldr	r2, [pc, #120]	; (8001608 <MGPIO_voidSetPinMode+0xdc>)
 800158e:	430b      	orrs	r3, r1
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e030      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOC_PORT : MGPIOC->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MGPIO_voidSetPinMode+0xe0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	7979      	ldrb	r1, [r7, #5]
 800159a:	79ba      	ldrb	r2, [r7, #6]
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	4611      	mov	r1, r2
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <MGPIO_voidSetPinMode+0xe0>)
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e024      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOD_PORT : MGPIOD->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MGPIO_voidSetPinMode+0xe4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	7979      	ldrb	r1, [r7, #5]
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	0052      	lsls	r2, r2, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	4611      	mov	r1, r2
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <MGPIO_voidSetPinMode+0xe4>)
 80015be:	430b      	orrs	r3, r1
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e018      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOE_PORT : MGPIOE->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MGPIO_voidSetPinMode+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	7979      	ldrb	r1, [r7, #5]
 80015ca:	79ba      	ldrb	r2, [r7, #6]
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	4611      	mov	r1, r2
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <MGPIO_voidSetPinMode+0xe8>)
 80015d6:	430b      	orrs	r3, r1
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e00c      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  case _GPIOH_PORT : MGPIOH->MODER |= (u32) ( Copy_u8Mode << ( 2U* Copy_u8PinNum )) ; break;
 80015dc:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MGPIO_voidSetPinMode+0xec>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	7979      	ldrb	r1, [r7, #5]
 80015e2:	79ba      	ldrb	r2, [r7, #6]
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4611      	mov	r1, r2
 80015ec:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <MGPIO_voidSetPinMode+0xec>)
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e000      	b.n	80015f6 <MGPIO_voidSetPinMode+0xca>
	  default : /*ERROR*/ break ;
 80015f4:	bf00      	nop
    }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	40020800 	.word	0x40020800
 8001610:	40020c00 	.word	0x40020c00
 8001614:	40021000 	.word	0x40021000
 8001618:	40021c00 	.word	0x40021c00

0800161c <MGPIO_voidSetPullType>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8PullType                    */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPullType(u8 Copy_u8PortName ,u32 Copy_u8PinNum ,u32 Copy_u8PullType )
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	73fb      	strb	r3, [r7, #15]
	
		switch(Copy_u8PortName)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d851      	bhi.n	80016d4 <MGPIO_voidSetPullType+0xb8>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <MGPIO_voidSetPullType+0x1c>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001651 	.word	0x08001651
 800163c:	08001667 	.word	0x08001667
 8001640:	0800167d 	.word	0x0800167d
 8001644:	08001693 	.word	0x08001693
 8001648:	080016a9 	.word	0x080016a9
 800164c:	080016bf 	.word	0x080016bf
	{
	  case _GPIOA_PORT : MGPIOA->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001650:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <MGPIO_voidSetPullType+0xc8>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	4921      	ldr	r1, [pc, #132]	; (80016e4 <MGPIO_voidSetPullType+0xc8>)
 8001660:	4313      	orrs	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
 8001664:	e037      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  case _GPIOB_PORT : MGPIOB->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MGPIO_voidSetPullType+0xcc>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	491c      	ldr	r1, [pc, #112]	; (80016e8 <MGPIO_voidSetPullType+0xcc>)
 8001676:	4313      	orrs	r3, r2
 8001678:	60cb      	str	r3, [r1, #12]
 800167a:	e02c      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  case _GPIOC_PORT : MGPIOC->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <MGPIO_voidSetPullType+0xd0>)
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	4918      	ldr	r1, [pc, #96]	; (80016ec <MGPIO_voidSetPullType+0xd0>)
 800168c:	4313      	orrs	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
 8001690:	e021      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  case _GPIOD_PORT : MGPIOD->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MGPIO_voidSetPullType+0xd4>)
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	4913      	ldr	r1, [pc, #76]	; (80016f0 <MGPIO_voidSetPullType+0xd4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60cb      	str	r3, [r1, #12]
 80016a6:	e016      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  case _GPIOE_PORT : MGPIOE->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MGPIO_voidSetPullType+0xd8>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	490f      	ldr	r1, [pc, #60]	; (80016f4 <MGPIO_voidSetPullType+0xd8>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60cb      	str	r3, [r1, #12]
 80016bc:	e00b      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  case _GPIOH_PORT : MGPIOH->PUPDR   |= (u32) ( Copy_u8PullType << ( 2U* Copy_u8PinNum )) ; break;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MGPIO_voidSetPullType+0xdc>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	490a      	ldr	r1, [pc, #40]	; (80016f8 <MGPIO_voidSetPullType+0xdc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]
 80016d2:	e000      	b.n	80016d6 <MGPIO_voidSetPullType+0xba>
	  default : /*ERROR*/ break ;
 80016d4:	bf00      	nop
	}
	
}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40021c00 	.word	0x40021c00

080016fc <MGPIO_u8ReadData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum                                        */                   
/* 3- Function Return      -> LOC_u8ReturnValue                                                        */
/*******************************************************************************************************/

u8 MGPIO_u8ReadData(u8 Copy_u8PORT ,u8 Copy_u8PIN)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	460a      	mov	r2, r1
 8001706:	71fb      	strb	r3, [r7, #7]
 8001708:	4613      	mov	r3, r2
 800170a:	71bb      	strb	r3, [r7, #6]
	u8 L_u8Data = 0 ;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]
	switch(Copy_u8PORT)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d84a      	bhi.n	80017ac <MGPIO_u8ReadData+0xb0>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <MGPIO_u8ReadData+0x20>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001735 	.word	0x08001735
 8001720:	08001749 	.word	0x08001749
 8001724:	0800175d 	.word	0x0800175d
 8001728:	08001771 	.word	0x08001771
 800172c:	08001785 	.word	0x08001785
 8001730:	08001799 	.word	0x08001799
	{ 
	  case _GPIOA_PORT :L_u8Data= GET_BIT(MGPIOA->IDR,Copy_u8PIN ) ; break;
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <MGPIO_u8ReadData+0xc0>)
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	79bb      	ldrb	r3, [r7, #6]
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	e032      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOB_PORT :L_u8Data= GET_BIT(MGPIOB->IDR,Copy_u8PIN ) ; break;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MGPIO_u8ReadData+0xc4>)
 800174a:	691a      	ldr	r2, [r3, #16]
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e028      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOC_PORT :L_u8Data= GET_BIT(MGPIOC->IDR,Copy_u8PIN ) ; break;
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <MGPIO_u8ReadData+0xc8>)
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e01e      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOD_PORT :L_u8Data= GET_BIT(MGPIOD->IDR,Copy_u8PIN) ; break;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MGPIO_u8ReadData+0xcc>)
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	79bb      	ldrb	r3, [r7, #6]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e014      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOE_PORT :L_u8Data= GET_BIT(MGPIOE->IDR,Copy_u8PIN) ; break;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MGPIO_u8ReadData+0xd0>)
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	fa22 f303 	lsr.w	r3, r2, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e00a      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  
	  case _GPIOH_PORT :L_u8Data= GET_BIT(MGPIOH->IDR,Copy_u8PIN) ; break;
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <MGPIO_u8ReadData+0xd4>)
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	79bb      	ldrb	r3, [r7, #6]
 800179e:	fa22 f303 	lsr.w	r3, r2, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e000      	b.n	80017ae <MGPIO_u8ReadData+0xb2>
	  default : /*ERROR*/ break ;
 80017ac:	bf00      	nop
		
	}
	return L_u8Data;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40020000 	.word	0x40020000
 80017c0:	40020400 	.word	0x40020400
 80017c4:	40020800 	.word	0x40020800
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40021c00 	.word	0x40021c00

080017d4 <MGPIO_voidWriteData>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8State                       */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	460b      	mov	r3, r1
 80017e0:	71bb      	strb	r3, [r7, #6]
 80017e2:	4613      	mov	r3, r2
 80017e4:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State==HIGH)
 80017e6:	797b      	ldrb	r3, [r7, #5]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d155      	bne.n	8001898 <MGPIO_voidWriteData+0xc4>
	{
		switch(Copy_u8PortName)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	f200 80ac 	bhi.w	800194c <MGPIO_voidWriteData+0x178>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <MGPIO_voidWriteData+0x28>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001815 	.word	0x08001815
 8001800:	0800182b 	.word	0x0800182b
 8001804:	08001841 	.word	0x08001841
 8001808:	08001857 	.word	0x08001857
 800180c:	0800186d 	.word	0x0800186d
 8001810:	08001883 	.word	0x08001883
		{
		case _GPIOA_PORT :  SET_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <MGPIO_voidWriteData+0x18c>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	79ba      	ldrb	r2, [r7, #6]
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	4611      	mov	r1, r2
 8001822:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <MGPIO_voidWriteData+0x18c>)
 8001824:	430b      	orrs	r3, r1
 8001826:	6153      	str	r3, [r2, #20]
 8001828:	e093      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  SET_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <MGPIO_voidWriteData+0x190>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	79ba      	ldrb	r2, [r7, #6]
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	4611      	mov	r1, r2
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <MGPIO_voidWriteData+0x190>)
 800183a:	430b      	orrs	r3, r1
 800183c:	6153      	str	r3, [r2, #20]
 800183e:	e088      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  SET_BIT(GPIOC_ODR,Copy_u8PinNum); break;
 8001840:	4b49      	ldr	r3, [pc, #292]	; (8001968 <MGPIO_voidWriteData+0x194>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	79ba      	ldrb	r2, [r7, #6]
 8001846:	2101      	movs	r1, #1
 8001848:	fa01 f202 	lsl.w	r2, r1, r2
 800184c:	4611      	mov	r1, r2
 800184e:	4a46      	ldr	r2, [pc, #280]	; (8001968 <MGPIO_voidWriteData+0x194>)
 8001850:	430b      	orrs	r3, r1
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e07d      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  SET_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <MGPIO_voidWriteData+0x198>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	79ba      	ldrb	r2, [r7, #6]
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	4611      	mov	r1, r2
 8001864:	4a41      	ldr	r2, [pc, #260]	; (800196c <MGPIO_voidWriteData+0x198>)
 8001866:	430b      	orrs	r3, r1
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	e072      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  SET_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 800186c:	4b40      	ldr	r3, [pc, #256]	; (8001970 <MGPIO_voidWriteData+0x19c>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	2101      	movs	r1, #1
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	4611      	mov	r1, r2
 800187a:	4a3d      	ldr	r2, [pc, #244]	; (8001970 <MGPIO_voidWriteData+0x19c>)
 800187c:	430b      	orrs	r3, r1
 800187e:	6153      	str	r3, [r2, #20]
 8001880:	e067      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  SET_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <MGPIO_voidWriteData+0x1a0>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	79ba      	ldrb	r2, [r7, #6]
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	4611      	mov	r1, r2
 8001890:	4a38      	ldr	r2, [pc, #224]	; (8001974 <MGPIO_voidWriteData+0x1a0>)
 8001892:	430b      	orrs	r3, r1
 8001894:	6153      	str	r3, [r2, #20]
 8001896:	e05c      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
		}
		
	}
	else{
		switch(Copy_u8PortName)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b05      	cmp	r3, #5
 800189c:	d858      	bhi.n	8001950 <MGPIO_voidWriteData+0x17c>
 800189e:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <MGPIO_voidWriteData+0xd0>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018d5 	.word	0x080018d5
 80018ac:	080018ed 	.word	0x080018ed
 80018b0:	08001905 	.word	0x08001905
 80018b4:	0800191d 	.word	0x0800191d
 80018b8:	08001935 	.word	0x08001935
		{
		case _GPIOA_PORT :  CLR_BIT(MGPIOA ->ODR,Copy_u8PinNum); break;
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <MGPIO_voidWriteData+0x18c>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	79ba      	ldrb	r2, [r7, #6]
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	43d2      	mvns	r2, r2
 80018ca:	4611      	mov	r1, r2
 80018cc:	4a24      	ldr	r2, [pc, #144]	; (8001960 <MGPIO_voidWriteData+0x18c>)
 80018ce:	400b      	ands	r3, r1
 80018d0:	6153      	str	r3, [r2, #20]
 80018d2:	e03e      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOB_PORT :  CLR_BIT(MGPIOB ->ODR,Copy_u8PinNum); break;
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <MGPIO_voidWriteData+0x190>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	79ba      	ldrb	r2, [r7, #6]
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	43d2      	mvns	r2, r2
 80018e2:	4611      	mov	r1, r2
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <MGPIO_voidWriteData+0x190>)
 80018e6:	400b      	ands	r3, r1
 80018e8:	6153      	str	r3, [r2, #20]
 80018ea:	e032      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOC_PORT :  CLR_BIT(MGPIOC ->ODR,Copy_u8PinNum); break;
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <MGPIO_voidWriteData+0x1a4>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	4a1e      	ldr	r2, [pc, #120]	; (8001978 <MGPIO_voidWriteData+0x1a4>)
 80018fe:	400b      	ands	r3, r1
 8001900:	6153      	str	r3, [r2, #20]
 8001902:	e026      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOD_PORT :  CLR_BIT(MGPIOD ->ODR,Copy_u8PinNum); break;
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <MGPIO_voidWriteData+0x198>)
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	79ba      	ldrb	r2, [r7, #6]
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	43d2      	mvns	r2, r2
 8001912:	4611      	mov	r1, r2
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <MGPIO_voidWriteData+0x198>)
 8001916:	400b      	ands	r3, r1
 8001918:	6153      	str	r3, [r2, #20]
 800191a:	e01a      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOE_PORT :  CLR_BIT(MGPIOE ->ODR,Copy_u8PinNum); break;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MGPIO_voidWriteData+0x19c>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	79ba      	ldrb	r2, [r7, #6]
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	43d2      	mvns	r2, r2
 800192a:	4611      	mov	r1, r2
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <MGPIO_voidWriteData+0x19c>)
 800192e:	400b      	ands	r3, r1
 8001930:	6153      	str	r3, [r2, #20]
 8001932:	e00e      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		case _GPIOH_PORT :  CLR_BIT(MGPIOH ->ODR,Copy_u8PinNum); break;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MGPIO_voidWriteData+0x1a0>)
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	79ba      	ldrb	r2, [r7, #6]
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f202 	lsl.w	r2, r1, r2
 8001940:	43d2      	mvns	r2, r2
 8001942:	4611      	mov	r1, r2
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <MGPIO_voidWriteData+0x1a0>)
 8001946:	400b      	ands	r3, r1
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	e002      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		default : /*ERROR*/ break ;
 800194c:	bf00      	nop
 800194e:	e000      	b.n	8001952 <MGPIO_voidWriteData+0x17e>
		
		default : /*ERROR*/ break ;
 8001950:	bf00      	nop
		}
	}
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020814 	.word	0x40020814
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40021c00 	.word	0x40021c00
 8001978:	40020800 	.word	0x40020800

0800197c <MGPIO_voidSetPinAltFn>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  ,Copy_u8ALF                           */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinAltFn( u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8ALF )
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	460b      	mov	r3, r1
 8001988:	71bb      	strb	r3, [r7, #6]
 800198a:	4613      	mov	r3, r2
 800198c:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinNum <=7U)
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	2b07      	cmp	r3, #7
 8001992:	d85b      	bhi.n	8001a4c <MGPIO_voidSetPinAltFn+0xd0>
	{
		switch(Copy_u8PortNum )
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b05      	cmp	r3, #5
 8001998:	f200 80be 	bhi.w	8001b18 <MGPIO_voidSetPinAltFn+0x19c>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <MGPIO_voidSetPinAltFn+0x28>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019bd 	.word	0x080019bd
 80019a8:	080019d5 	.word	0x080019d5
 80019ac:	080019ed 	.word	0x080019ed
 80019b0:	08001a05 	.word	0x08001a05
 80019b4:	08001a1d 	.word	0x08001a1d
 80019b8:	08001a35 	.word	0x08001a35
		{
			 case _GPIOA_PORT  : MGPIOA->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80019bc:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <MGPIO_voidSetPinAltFn+0x1b0>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	7979      	ldrb	r1, [r7, #5]
 80019c2:	79ba      	ldrb	r2, [r7, #6]
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	4611      	mov	r1, r2
 80019cc:	4a57      	ldr	r2, [pc, #348]	; (8001b2c <MGPIO_voidSetPinAltFn+0x1b0>)
 80019ce:	430b      	orrs	r3, r1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	e0a4      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80019d4:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <MGPIO_voidSetPinAltFn+0x1b4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	7979      	ldrb	r1, [r7, #5]
 80019da:	79ba      	ldrb	r2, [r7, #6]
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4611      	mov	r1, r2
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <MGPIO_voidSetPinAltFn+0x1b4>)
 80019e6:	430b      	orrs	r3, r1
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e098      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <MGPIO_voidSetPinAltFn+0x1b8>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	7979      	ldrb	r1, [r7, #5]
 80019f2:	79ba      	ldrb	r2, [r7, #6]
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	4611      	mov	r1, r2
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <MGPIO_voidSetPinAltFn+0x1b8>)
 80019fe:	430b      	orrs	r3, r1
 8001a00:	6213      	str	r3, [r2, #32]
 8001a02:	e08c      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	7979      	ldrb	r1, [r7, #5]
 8001a0a:	79ba      	ldrb	r2, [r7, #6]
 8001a0c:	0092      	lsls	r2, r2, #2
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4611      	mov	r1, r2
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001a16:	430b      	orrs	r3, r1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	e080      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001a1c:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	7979      	ldrb	r1, [r7, #5]
 8001a22:	79ba      	ldrb	r2, [r7, #6]
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4a43      	ldr	r2, [pc, #268]	; (8001b3c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6213      	str	r3, [r2, #32]
 8001a32:	e074      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRL |=(u32)(Copy_u8ALF <<(4U* Copy_u8PinNum)); break ;
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	7979      	ldrb	r1, [r7, #5]
 8001a3a:	79ba      	ldrb	r2, [r7, #6]
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	4611      	mov	r1, r2
 8001a44:	4a3e      	ldr	r2, [pc, #248]	; (8001b40 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6213      	str	r3, [r2, #32]
 8001a4a:	e068      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
	// 8 : 15
	// i need 8 = 0 & 15 = 7
	
	else
	{
	switch(Copy_u8PortNum )
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d864      	bhi.n	8001b1c <MGPIO_voidSetPinAltFn+0x1a0>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <MGPIO_voidSetPinAltFn+0xdc>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a8d 	.word	0x08001a8d
 8001a60:	08001aa9 	.word	0x08001aa9
 8001a64:	08001ac5 	.word	0x08001ac5
 8001a68:	08001ae1 	.word	0x08001ae1
 8001a6c:	08001afd 	.word	0x08001afd
		{
			 case _GPIOA_PORT  : MGPIOA->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <MGPIO_voidSetPinAltFn+0x1b0>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	7979      	ldrb	r1, [r7, #5]
 8001a76:	79ba      	ldrb	r2, [r7, #6]
 8001a78:	f002 0207 	and.w	r2, r2, #7
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4611      	mov	r1, r2
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <MGPIO_voidSetPinAltFn+0x1b0>)
 8001a86:	430b      	orrs	r3, r1
 8001a88:	6253      	str	r3, [r2, #36]	; 0x24
 8001a8a:	e048      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOB_PORT  : MGPIOB->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <MGPIO_voidSetPinAltFn+0x1b4>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	7979      	ldrb	r1, [r7, #5]
 8001a92:	79ba      	ldrb	r2, [r7, #6]
 8001a94:	f002 0207 	and.w	r2, r2, #7
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <MGPIO_voidSetPinAltFn+0x1b4>)
 8001aa2:	430b      	orrs	r3, r1
 8001aa4:	6253      	str	r3, [r2, #36]	; 0x24
 8001aa6:	e03a      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOC_PORT  : MGPIOC->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MGPIO_voidSetPinAltFn+0x1b8>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	7979      	ldrb	r1, [r7, #5]
 8001aae:	79ba      	ldrb	r2, [r7, #6]
 8001ab0:	f002 0207 	and.w	r2, r2, #7
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aba:	4611      	mov	r1, r2
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <MGPIO_voidSetPinAltFn+0x1b8>)
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ac2:	e02c      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOD_PORT  : MGPIOD->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	7979      	ldrb	r1, [r7, #5]
 8001aca:	79ba      	ldrb	r2, [r7, #6]
 8001acc:	f002 0207 	and.w	r2, r2, #7
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <MGPIO_voidSetPinAltFn+0x1bc>)
 8001ada:	430b      	orrs	r3, r1
 8001adc:	6253      	str	r3, [r2, #36]	; 0x24
 8001ade:	e01e      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOE_PORT  : MGPIOE->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U ))); break ;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	7979      	ldrb	r1, [r7, #5]
 8001ae6:	79ba      	ldrb	r2, [r7, #6]
 8001ae8:	f002 0207 	and.w	r2, r2, #7
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	fa01 f202 	lsl.w	r2, r1, r2
 8001af2:	4611      	mov	r1, r2
 8001af4:	4a11      	ldr	r2, [pc, #68]	; (8001b3c <MGPIO_voidSetPinAltFn+0x1c0>)
 8001af6:	430b      	orrs	r3, r1
 8001af8:	6253      	str	r3, [r2, #36]	; 0x24
 8001afa:	e010      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 case _GPIOH_PORT  : MGPIOH->AFRH |=(u32)(Copy_u8ALF <<(4U* (Copy_u8PinNum % 8U))); break ;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	7979      	ldrb	r1, [r7, #5]
 8001b02:	79ba      	ldrb	r2, [r7, #6]
 8001b04:	f002 0207 	and.w	r2, r2, #7
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <MGPIO_voidSetPinAltFn+0x1c4>)
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6253      	str	r3, [r2, #36]	; 0x24
 8001b16:	e002      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <MGPIO_voidSetPinAltFn+0x1a2>
			 default : break ;
 8001b1c:	bf00      	nop
		
		
	}

	
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021c00 	.word	0x40021c00

08001b44 <MNVIC_vInterruptSetEnable>:
 * Function: 	Enable External Interrupts
 * Inputs: 		Interrupt ID
 * Outputs:		None
 */

void MNVIC_vInterruptSetEnable(u8 Copy_u8InterruptID){
 8001b44:	b490      	push	{r4, r7}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	NVIC -> ISER[Copy_u8InterruptID / REGISTER_BITS] |= (1<<(Copy_u8InterruptID % REGISTER_BITS));
 8001b4e:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <MNVIC_vInterruptSetEnable+0x3c>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2d8      	uxtb	r0, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	f002 021f 	and.w	r2, r2, #31
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	4614      	mov	r4, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	; (8001b80 <MNVIC_vInterruptSetEnable+0x3c>)
 8001b6c:	4601      	mov	r1, r0
 8001b6e:	4323      	orrs	r3, r4
 8001b70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc90      	pop	{r4, r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <MNVIC_vSetGroupMode>:
 * Function: 	Set Group Mode in SCB (AIRCR)
 * Inputs: 		Group Mode
 * Outputs:		None
 */

void MNVIC_vSetGroupMode(Group_Mode Copy_GroupMode){
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
	Global_u32SetGroupPriority = VECTKEY | (Copy_GroupMode << 8);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <MNVIC_vSetGroupMode+0x30>)
 8001b9e:	601a      	str	r2, [r3, #0]
	AIRCR = Global_u32SetGroupPriority;
 8001ba0:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <MNVIC_vSetGroupMode+0x34>)
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <MNVIC_vSetGroupMode+0x30>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	2000005c 	.word	0x2000005c
 8001bb8:	e000ed0c 	.word	0xe000ed0c

08001bbc <MNVIC_vSetInterruptPriority>:
 * 				2- Group ID
 * 				3- Subgroup ID
 * Outputs:		None
 */

void MNVIC_vSetInterruptPriority(u8 Copy_u8InterruptID, u8 Copy_GroupID, u8 Copy_SubGroupID){
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	71bb      	strb	r3, [r7, #6]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	717b      	strb	r3, [r7, #5]
	u8 u8_PrioValue = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	73fb      	strb	r3, [r7, #15]
	switch (Global_u32SetGroupPriority){
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MNVIC_vSetInterruptPriority+0x9c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3b03      	subs	r3, #3
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d82e      	bhi.n	8001c3a <MNVIC_vSetInterruptPriority+0x7e>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <MNVIC_vSetInterruptPriority+0x28>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf9 	.word	0x08001bf9
 8001be8:	08001bff 	.word	0x08001bff
 8001bec:	08001c11 	.word	0x08001c11
 8001bf0:	08001c23 	.word	0x08001c23
 8001bf4:	08001c35 	.word	0x08001c35
	case MNVIC_G16_SG0: u8_PrioValue = Copy_GroupID; break;
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e01d      	b.n	8001c3a <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G8_SG2: 	u8_PrioValue = (Copy_GroupID << 1) | Copy_SubGroupID; break;
 8001bfe:	79bb      	ldrb	r3, [r7, #6]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	e014      	b.n	8001c3a <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G4_SG4: 	u8_PrioValue = (Copy_GroupID << 2) | Copy_SubGroupID; break;
 8001c10:	79bb      	ldrb	r3, [r7, #6]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	73fb      	strb	r3, [r7, #15]
 8001c20:	e00b      	b.n	8001c3a <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G2_SG8: 	u8_PrioValue = (Copy_GroupID << 3) | Copy_SubGroupID; break;
 8001c22:	79bb      	ldrb	r3, [r7, #6]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	73fb      	strb	r3, [r7, #15]
 8001c32:	e002      	b.n	8001c3a <MNVIC_vSetInterruptPriority+0x7e>
	case MNVIC_G0_SG16: u8_PrioValue = Copy_SubGroupID; break;
 8001c34:	797b      	ldrb	r3, [r7, #5]
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	bf00      	nop
	}
	NVIC -> IPR [Copy_u8InterruptID] = (u8_PrioValue << 4);
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <MNVIC_vSetInterruptPriority+0xa0>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000005c 	.word	0x2000005c
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <MRCC_vInit>:
#include "MRCC_Int.h"
#include "MRCC_Private.h"
#include "MRCC_Config.h"

void MRCC_vInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
	/*1- CSS (ON/OFF) */

	/*2- HSE_BYP CLR->Oscillator Enable not bypassed, SET->Oscillator Disable bypassed */
	CLR_BIT(RCC -> CR, HSEBYP);
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MRCC_vInit+0x4c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <MRCC_vInit+0x4c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

	/*3- select clock switch (HSI/HSE/PLL) */
	SET_BIT(RCC -> CFGR, SW0);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MRCC_vInit+0x4c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <MRCC_vInit+0x4c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6093      	str	r3, [r2, #8]

	/*5- PLL configuration */

	/*6- Enable the selected clock (HSI ON / HSE ON / PLL ON)*/
#if RCC_HSE_ENABLE == ENABLE
	SET_BIT(RCC->CR, HSEON);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MRCC_vInit+0x4c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <MRCC_vInit+0x4c>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
#endif
#if RCC_HSI_ENABLE == ENABLE
	SET_BIT(RCC->CR, HSION);
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MRCC_vInit+0x4c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <MRCC_vInit+0x4c>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6013      	str	r3, [r2, #0]
#endif
#if RCC_PLL_ENABLE == ENABLE
	SET_BIT(RCC->CR, PLLON);
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <MRCC_vInit+0x4c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <MRCC_vInit+0x4c>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]
#endif

}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800

08001cb0 <MRCC_vEnableClock>:

void MRCC_vEnableClock(RCC_ENR REG, RCC_Peripheral PER)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
/******************** Assignment *******************************/
	switch(REG){
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d836      	bhi.n	8001d34 <MRCC_vEnableClock+0x84>
 8001cc6:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <MRCC_vEnableClock+0x1c>)
 8001cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001cf3 	.word	0x08001cf3
 8001cd4:	08001d09 	.word	0x08001d09
 8001cd8:	08001d1f 	.word	0x08001d1f
	case AHB1:
		SET_BIT(RCC -> AHB1ENR ,  PER);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	79ba      	ldrb	r2, [r7, #6]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8001cf0:	e021      	b.n	8001d36 <MRCC_vEnableClock+0x86>
	case AHB2:
		SET_BIT(RCC -> AHB2ENR ,  PER);
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	79ba      	ldrb	r2, [r7, #6]
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001d02:	430b      	orrs	r3, r1
 8001d04:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8001d06:	e016      	b.n	8001d36 <MRCC_vEnableClock+0x86>
	case APB1:
		SET_BIT(RCC -> APB1ENR ,  PER);
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	79ba      	ldrb	r2, [r7, #6]
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f202 	lsl.w	r2, r1, r2
 8001d14:	4611      	mov	r1, r2
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8001d1c:	e00b      	b.n	8001d36 <MRCC_vEnableClock+0x86>
	case APB2:
		SET_BIT(RCC -> APB2ENR ,  PER);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	79ba      	ldrb	r2, [r7, #6]
 8001d24:	2101      	movs	r1, #1
 8001d26:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <MRCC_vEnableClock+0x94>)
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	6453      	str	r3, [r2, #68]	; 0x44
		break;
 8001d32:	e000      	b.n	8001d36 <MRCC_vEnableClock+0x86>
	default:
		break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <SPI1_IRQHandler>:

void MSPI4_voidSetCallBack	(void(*Cptr)(void)){
	SPI4_Callback = Cptr;
}

void SPI1_IRQHandler (void){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	SPI1_Callback();
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <SPI1_IRQHandler+0x10>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4798      	blx	r3
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000060 	.word	0x20000060

08001d5c <SPI2_IRQHandler>:

void SPI2_IRQHandler (void){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	SPI2_Callback();
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <SPI2_IRQHandler+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4798      	blx	r3
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000064 	.word	0x20000064

08001d70 <SPI3_IRQHandler>:

void SPI3_IRQHandler (void){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	SPI3_Callback();
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <SPI3_IRQHandler+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4798      	blx	r3
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000068 	.word	0x20000068

08001d84 <SPI4_IRQHandler>:

void SPI4_IRQHandler (void){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	SPI4_Callback();
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <SPI4_IRQHandler+0x10>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4798      	blx	r3
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000006c 	.word	0x2000006c

08001d98 <MSTK_voidInit>:
/* 1- Function Description -> Function to enable the systick and initialize the clock source           */
/* 2- Function Input       -> No Thing              											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MSTK_voidInit(void){
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	SET_BIT(MSTK -> CTRL, CLKSRC);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <MSTK_voidInit+0x1c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <MSTK_voidInit+0x1c>)
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <MSTK_voidIntState>:
/* 1- Function Description -> Function to enable systick exception request                             */
/* 2- Function Input       -> No Thing              											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MSTK_voidIntState(void){
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	SET_BIT(MSTK -> CTRL, INTEN);
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <MSTK_voidIntState+0x1c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <MSTK_voidIntState+0x1c>)
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <MSTK_voidStart>:
/* 1- Function Description -> Function to set the value the systick should start counting down from    */
/* 2- Function Input       -> Preload Value          											       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MSTK_voidStart(u32 Copy_u8PreloadValue){
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	MSTK -> VAL = 0;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MSTK_voidStart+0x3c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
	MSTK -> LOAD |= (Copy_u8PreloadValue * 16000 - 1);
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MSTK_voidStart+0x3c>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8001df0:	fb01 f303 	mul.w	r3, r1, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	4907      	ldr	r1, [pc, #28]	; (8001e14 <MSTK_voidStart+0x3c>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
	SET_BIT(MSTK -> CTRL, EN);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <MSTK_voidStart+0x3c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <MSTK_voidStart+0x3c>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <MSTK_u8IsON>:
/* 1- Function Description -> Function to get if sysTick is ON                                         */
/* 2- Function Input       -> No Thing              											       */
/* 3- Function Return      -> 1, 0			                                                           */
/*******************************************************************************************************/

u8 MSTK_u8IsON(void){
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return GET_BIT(MSTK -> CTRL, EN);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <MSTK_u8IsON+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <CALLBACKSYS>:
/* 1- Function Description -> Function to set the callback function to the user's choice               */
/* 2- Function Input       -> Callback pointer to function              						       */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void CALLBACKSYS(void(*callback)(void)){
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	callbacksys = callback;
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <CALLBACKSYS+0x1c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000070 	.word	0x20000070

08001e58 <SysTick_Handler>:

void SysTick_Handler(void){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	callbacksys();
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <SysTick_Handler+0x10>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4798      	blx	r3

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000070 	.word	0x20000070

08001e6c <TIM2_IRQHandler>:
u8 park2 = 0;
u8 park3 = 0;

#if TIMER2 == ENABLE
void TIM2_IRQHandler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	if((TIM2 -> SR) & SR_UIF)  // means Overflow occurred
 8001e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00d      	beq.n	8001e9a <TIM2_IRQHandler+0x2e>
	{
		park1 ++;
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <TIM2_IRQHandler+0x38>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <TIM2_IRQHandler+0x38>)
 8001e88:	701a      	strb	r2, [r3, #0]
		(TIM2 -> SR) &= ~(SR_UIF);
 8001e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	6113      	str	r3, [r2, #16]
	}

}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	20000074 	.word	0x20000074

08001ea8 <TIM3_IRQHandler>:
#endif

#if TIMER3 == ENABLE
void TIM3_IRQHandler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	if((TIM3 -> SR) & SR_UIF) // means Overflow occurred
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <TIM3_IRQHandler+0x34>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <TIM3_IRQHandler+0x28>
	{
		park2 ++;
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <TIM3_IRQHandler+0x38>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <TIM3_IRQHandler+0x38>)
 8001ec2:	701a      	strb	r2, [r3, #0]
		(TIM3 -> SR) &= ~(SR_UIF);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <TIM3_IRQHandler+0x34>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <TIM3_IRQHandler+0x34>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6113      	str	r3, [r2, #16]
	}

}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	20000075 	.word	0x20000075

08001ee4 <TIM4_IRQHandler>:
#endif

#if TIMER4 == ENABLE
void TIM4_IRQHandler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	if((TIM4 -> SR) & SR_UIF) // means Overflow occurred
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <TIM4_IRQHandler+0x34>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00b      	beq.n	8001f0c <TIM4_IRQHandler+0x28>
	{
		park3++;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <TIM4_IRQHandler+0x38>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <TIM4_IRQHandler+0x38>)
 8001efe:	701a      	strb	r2, [r3, #0]
		(TIM4 -> SR) &= ~(SR_UIF);
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <TIM4_IRQHandler+0x34>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a04      	ldr	r2, [pc, #16]	; (8001f18 <TIM4_IRQHandler+0x34>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6113      	str	r3, [r2, #16]
	}

}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	20000076 	.word	0x20000076

08001f20 <MUSART_voidInit>:
Return type = void
Input parameters = u16 copy_u16BaudRate
Functionality : Initializes USART1
*/

void MUSART_voidInit(u32 copy_u32BaudRate){
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	/* Configure baud rate */
	float BRR_floatvalue, BRR_fractionvalue;
	u16 BRR_value;
	u8  BRR_Fraction;
#ifdef UART_HSI
	BRR_floatvalue = UART_HSI / (16 * copy_u32BaudRate);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4a31      	ldr	r2, [pc, #196]	; (8001ff4 <MUSART_voidInit+0xd4>)
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3a:	edc7 7a05 	vstr	s15, [r7, #20]
#endif
#ifdef UART_HSE
	BRR_floatvalue = UART_HSE / (16 * copy_u32BaudRate);
#endif
	BRR_value = (u16) BRR_floatvalue;
 8001f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f46:	ee17 3a90 	vmov	r3, s15
 8001f4a:	827b      	strh	r3, [r7, #18]
	BRR_fractionvalue = BRR_floatvalue - BRR_value;
 8001f4c:	8a7b      	ldrh	r3, [r7, #18]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	edc7 7a03 	vstr	s15, [r7, #12]
	BRR_Fraction = BRR_fractionvalue * 16;
 8001f62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f66:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f72:	edc7 7a00 	vstr	s15, [r7]
 8001f76:	783b      	ldrb	r3, [r7, #0]
 8001f78:	72fb      	strb	r3, [r7, #11]

	MUSART1 -> BRR = (BRR_value << 4) | (BRR_Fraction);
 8001f7a:	8a7b      	ldrh	r3, [r7, #18]
 8001f7c:	011a      	lsls	r2, r3, #4
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001f84:	609a      	str	r2, [r3, #8]

	CLR_BIT(MUSART1->CR1,OVER8);		/*Over sampling by 16*/
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f90:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR1,M);
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f9c:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR1,PCE);
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fa8:	60d3      	str	r3, [r2, #12]
	CLR_BIT(MUSART1->CR2,12);
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fb4:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fc0:	6113      	str	r3, [r2, #16]

	SET_BIT(MUSART1->CR1,TE);
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	60d3      	str	r3, [r2, #12]
	SET_BIT(MUSART1->CR1,RE);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	60d3      	str	r3, [r2, #12]
	SET_BIT(MUSART1->CR1,RXNEIE);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <MUSART_voidInit+0xd8>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	60d3      	str	r3, [r2, #12]


}
 8001fe6:	bf00      	nop
 8001fe8:	371c      	adds	r7, #28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	00f42400 	.word	0x00f42400
 8001ff8:	40011000 	.word	0x40011000

08001ffc <MUSART_voidSendData>:
Return type = void
Input parameters = u8* copy_u8Data,u8 copy_u8Len
Functionality : Sends data when transmitter data register is not empty
*/

void MUSART_voidSendData(u8* copy_u8Data,u8 copy_u8Len){
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	70fb      	strb	r3, [r7, #3]

	for(u8 i=0;i<copy_u8Len;i++){
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e00f      	b.n	800202e <MUSART_voidSendData+0x32>
		MUSART1->DR=copy_u8Data[i];
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MUSART_voidSendData+0x48>)
 8002018:	605a      	str	r2, [r3, #4]
		while(GET_BIT(MUSART1->SR,7)==0);
 800201a:	bf00      	nop
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MUSART_voidSendData+0x48>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f9      	beq.n	800201c <MUSART_voidSendData+0x20>
	for(u8 i=0;i<copy_u8Len;i++){
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	3301      	adds	r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3eb      	bcc.n	800200e <MUSART_voidSendData+0x12>
	}

}
 8002036:	bf00      	nop
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	40011000 	.word	0x40011000

08002048 <MUSART_u8ReadData>:
Return type = u8
Input parameters = void
Functionality : Reads data when read data register is not empty
*/

u8 MUSART_u8ReadData(void){
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
	//u16 local_u16Timeout=0;
	u8 local_u8RecieveData=0;
 800204e:	2300      	movs	r3, #0
 8002050:	71fb      	strb	r3, [r7, #7]
	while(GET_BIT(MUSART1->SR,5)==0);
 8002052:	bf00      	nop
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <MUSART_u8ReadData+0x2c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f9      	beq.n	8002054 <MUSART_u8ReadData+0xc>
	local_u8RecieveData=(u8) MUSART1->DR;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <MUSART_u8ReadData+0x2c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	71fb      	strb	r3, [r7, #7]
	return local_u8RecieveData;
 8002066:	79fb      	ldrb	r3, [r7, #7]
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40011000 	.word	0x40011000

08002078 <MUSART_voidEnable>:
Return type = void
Input parameters = void
Functionality : Enables USART1
*/

void MUSART_voidEnable(void){
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	SET_BIT(MUSART1->CR1,UE);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <MUSART_voidEnable+0x1c>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <MUSART_voidEnable+0x1c>)
 8002082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40011000 	.word	0x40011000

08002098 <MUSART_voidDisable>:
Return type = void
Input parameters = void
Functionality : Disables USART1
*/

void MUSART_voidDisable(void){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	CLR_BIT(MUSART1->CR1,UE);
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <MUSART_voidDisable+0x1c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <MUSART_voidDisable+0x1c>)
 80020a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40011000 	.word	0x40011000

080020b8 <MUSART_voidCallBack>:
Return type = void
Input parameters = void(*Fptr)(void)
Functionality : Initiates callback for USART1
*/

void MUSART_voidCallBack(void(*Fptr)(void)){
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	USART_CallBack=Fptr;
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <MUSART_voidCallBack+0x1c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20000078 	.word	0x20000078

080020d8 <USART1_IRQHandler>:
Return type = void
Input parameters = void
Functionality : ISR of USART1
*/

void USART1_IRQHandler(void){
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	USART_CallBack();
 80020dc:	4b02      	ldr	r3, [pc, #8]	; (80020e8 <USART1_IRQHandler+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4798      	blx	r3
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000078 	.word	0x20000078

080020ec <Parking_3>:

/*******************************************************************************************************/
/*************************************** CALLBACK FUNCTIONS ********************************************/
/*******************************************************************************************************/

void Parking_3(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
	u8 Park_ID = 3;
 80020f2:	2303      	movs	r3, #3
 80020f4:	71fb      	strb	r3, [r7, #7]
	if(g_rec_p3 == 0){
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <Parking_3+0x98>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <Parking_3+0x32>
		park_3 = 0;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <Parking_3+0x9c>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
		if(MSTK_u8IsON() == 0){
 8002104:	f7ff fe88 	bl	8001e18 <MSTK_u8IsON>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <Parking_3+0x2a>
			MSTK_voidStart(1000);
 800210e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002112:	f7ff fe61 	bl	8001dd8 <MSTK_voidStart>
		}
		g_rec_p3 = 1;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <Parking_3+0x98>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
		u8 Price = ((10.0) * park_3) / 10.0;
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
		g_rec_p3 = 0;
	}
}
 800211c:	e02e      	b.n	800217c <Parking_3+0x90>
	else if(g_rec_p3 == 1){
 800211e:	4b19      	ldr	r3, [pc, #100]	; (8002184 <Parking_3+0x98>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d12a      	bne.n	800217c <Parking_3+0x90>
		u8 Price = ((10.0) * park_3) / 10.0;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <Parking_3+0x9c>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f9a4 	bl	8000478 <__aeabi_i2d>
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <Parking_3+0xa0>)
 8002136:	f7fe fa09 	bl	800054c <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <Parking_3+0xa0>)
 8002148:	f7fe fb2a 	bl	80007a0 <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe fc0c 	bl	8000970 <__aeabi_d2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	71bb      	strb	r3, [r7, #6]
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
 800215e:	1df9      	adds	r1, r7, #7
 8002160:	2301      	movs	r3, #1
 8002162:	2201      	movs	r2, #1
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe fc68 	bl	8000a3a <Comms_Read_Write>
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
 800216a:	1db9      	adds	r1, r7, #6
 800216c:	2301      	movs	r3, #1
 800216e:	2201      	movs	r2, #1
 8002170:	2000      	movs	r0, #0
 8002172:	f7fe fc62 	bl	8000a3a <Comms_Read_Write>
		g_rec_p3 = 0;
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <Parking_3+0x98>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000081 	.word	0x20000081
 8002188:	2000007e 	.word	0x2000007e
 800218c:	40240000 	.word	0x40240000

08002190 <Parking_2>:

void Parking_2(void){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
	u8 Park_ID = 2;
 8002196:	2302      	movs	r3, #2
 8002198:	71fb      	strb	r3, [r7, #7]
	if(g_rec_p2 == 0){
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <Parking_2+0x98>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <Parking_2+0x32>
		park_2 = 0;
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <Parking_2+0x9c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
		if(MSTK_u8IsON() == 0){
 80021a8:	f7ff fe36 	bl	8001e18 <MSTK_u8IsON>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d103      	bne.n	80021ba <Parking_2+0x2a>
			MSTK_voidStart(1000);
 80021b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b6:	f7ff fe0f 	bl	8001dd8 <MSTK_voidStart>
		}
		g_rec_p2 = 1;
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <Parking_2+0x98>)
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
		u8 Price = ((10.0) * park_2) / 10.0;
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
		g_rec_p2 = 0;
	}
}
 80021c0:	e02e      	b.n	8002220 <Parking_2+0x90>
	else if(g_rec_p2 == 1){
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <Parking_2+0x98>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d12a      	bne.n	8002220 <Parking_2+0x90>
		u8 Price = ((10.0) * park_2) / 10.0;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <Parking_2+0x9c>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f952 	bl	8000478 <__aeabi_i2d>
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <Parking_2+0xa0>)
 80021da:	f7fe f9b7 	bl	800054c <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <Parking_2+0xa0>)
 80021ec:	f7fe fad8 	bl	80007a0 <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fbba 	bl	8000970 <__aeabi_d2uiz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	71bb      	strb	r3, [r7, #6]
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
 8002202:	1df9      	adds	r1, r7, #7
 8002204:	2301      	movs	r3, #1
 8002206:	2201      	movs	r2, #1
 8002208:	2000      	movs	r0, #0
 800220a:	f7fe fc16 	bl	8000a3a <Comms_Read_Write>
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
 800220e:	1db9      	adds	r1, r7, #6
 8002210:	2301      	movs	r3, #1
 8002212:	2201      	movs	r2, #1
 8002214:	2000      	movs	r0, #0
 8002216:	f7fe fc10 	bl	8000a3a <Comms_Read_Write>
		g_rec_p2 = 0;
 800221a:	4b03      	ldr	r3, [pc, #12]	; (8002228 <Parking_2+0x98>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000080 	.word	0x20000080
 800222c:	2000007d 	.word	0x2000007d
 8002230:	40240000 	.word	0x40240000

08002234 <Parking_1>:

void Parking_1(void){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	u8 Park_ID = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	71fb      	strb	r3, [r7, #7]
	if(g_rec_p1 == 0){
 800223e:	4b23      	ldr	r3, [pc, #140]	; (80022cc <Parking_1+0x98>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <Parking_1+0x32>
		park_1 = 0;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <Parking_1+0x9c>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
		if(MSTK_u8IsON() == 0){
 800224c:	f7ff fde4 	bl	8001e18 <MSTK_u8IsON>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <Parking_1+0x2a>
			MSTK_voidStart(1000);
 8002256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800225a:	f7ff fdbd 	bl	8001dd8 <MSTK_voidStart>
		}
		g_rec_p1 = 1;
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <Parking_1+0x98>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
		u8 Price = ((10.0) * park_1) / 10.0;
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
		g_rec_p1 = 0;
	}
}
 8002264:	e02e      	b.n	80022c4 <Parking_1+0x90>
	else if(g_rec_p1 == 1){
 8002266:	4b19      	ldr	r3, [pc, #100]	; (80022cc <Parking_1+0x98>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d12a      	bne.n	80022c4 <Parking_1+0x90>
		u8 Price = ((10.0) * park_1) / 10.0;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <Parking_1+0x9c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f900 	bl	8000478 <__aeabi_i2d>
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <Parking_1+0xa0>)
 800227e:	f7fe f965 	bl	800054c <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <Parking_1+0xa0>)
 8002290:	f7fe fa86 	bl	80007a0 <__aeabi_ddiv>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fb68 	bl	8000970 <__aeabi_d2uiz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	71bb      	strb	r3, [r7, #6]
		Comms_Read_Write(USART_1, &Park_ID, 1, WRITE);
 80022a6:	1df9      	adds	r1, r7, #7
 80022a8:	2301      	movs	r3, #1
 80022aa:	2201      	movs	r2, #1
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fbc4 	bl	8000a3a <Comms_Read_Write>
		Comms_Read_Write(USART_1, &Price, 1, WRITE);
 80022b2:	1db9      	adds	r1, r7, #6
 80022b4:	2301      	movs	r3, #1
 80022b6:	2201      	movs	r2, #1
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fbbe 	bl	8000a3a <Comms_Read_Write>
		g_rec_p1 = 0;
 80022be:	4b03      	ldr	r3, [pc, #12]	; (80022cc <Parking_1+0x98>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2000007f 	.word	0x2000007f
 80022d0:	2000007c 	.word	0x2000007c
 80022d4:	40240000 	.word	0x40240000

080022d8 <Gate_OUT_Open>:

void Gate_OUT_Open(void){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	if(Comms_Read_Write(USART_1, &dummy_comms_val, 1, READ) == 2){
 80022dc:	2300      	movs	r3, #0
 80022de:	2201      	movs	r2, #1
 80022e0:	4905      	ldr	r1, [pc, #20]	; (80022f8 <Gate_OUT_Open+0x20>)
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fba9 	bl	8000a3a <Comms_Read_Write>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d102      	bne.n	80022f4 <Gate_OUT_Open+0x1c>
	g_gate_out = 1;
 80022ee:	4b03      	ldr	r3, [pc, #12]	; (80022fc <Gate_OUT_Open+0x24>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
	}
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000082 	.word	0x20000082
 80022fc:	20000084 	.word	0x20000084

08002300 <Gate_OUT_Close>:

void Gate_OUT_Close(void){
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
	g_gate_out = 2;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <Gate_OUT_Close+0x14>)
 8002306:	2202      	movs	r2, #2
 8002308:	701a      	strb	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	20000084 	.word	0x20000084

08002318 <Gate_IN_Close>:

void Gate_IN_Close(void){
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
	g_gate_in = 2;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <Gate_IN_Close+0x14>)
 800231e:	2202      	movs	r2, #2
 8002320:	701a      	strb	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20000083 	.word	0x20000083

08002330 <Gate_IN_Open>:

void Gate_IN_Open(void){
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
		g_gate_in = 1;
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <Gate_IN_Open+0x14>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20000083 	.word	0x20000083

08002348 <Gate_Time>:

void Gate_Time(void){
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	if(g_rec_p1 == 1){
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <Gate_Time+0x4c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <Gate_Time+0x18>
		park_1 ++;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <Gate_Time+0x50>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <Gate_Time+0x50>)
 800235e:	701a      	strb	r2, [r3, #0]
	}
	if(g_rec_p2 == 1){
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <Gate_Time+0x54>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <Gate_Time+0x2c>
		park_2 ++;
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <Gate_Time+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <Gate_Time+0x58>)
 8002372:	701a      	strb	r2, [r3, #0]
	}
	if(g_rec_p3 == 1){
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <Gate_Time+0x5c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <Gate_Time+0x40>
		park_3 ++;
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <Gate_Time+0x60>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <Gate_Time+0x60>)
 8002386:	701a      	strb	r2, [r3, #0]
	}
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	2000007f 	.word	0x2000007f
 8002398:	2000007c 	.word	0x2000007c
 800239c:	20000080 	.word	0x20000080
 80023a0:	2000007d 	.word	0x2000007d
 80023a4:	20000081 	.word	0x20000081
 80023a8:	2000007e 	.word	0x2000007e

080023ac <main>:
/*******************************************************************************************************/
/***************************************** MAIN FUNCTIONS **********************************************/
/*******************************************************************************************************/

int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af04      	add	r7, sp, #16
	/************ Clock Initialization ****************/

	MRCC_vInit();
 80023b2:	f7ff fc55 	bl	8001c60 <MRCC_vInit>

	/************* PB/IR Initialization ***************/

	/* Gate In PB/IR */

	PB_InterruptInit(PORT_A, PIN_0, PULL_UP, FALLING_TRIGGER, Gate_IN_Open, 0, 0);
 80023b6:	2300      	movs	r3, #0
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	4b55      	ldr	r3, [pc, #340]	; (8002514 <main+0x168>)
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2301      	movs	r3, #1
 80023c4:	2201      	movs	r2, #1
 80023c6:	2100      	movs	r1, #0
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fcb8 	bl	8000d3e <PB_InterruptInit>
	IR_InterruptInit(PORT_A, PIN_4, PULL_UP, RISING_TRIGGER, Gate_IN_Close, 0, 0);
 80023ce:	2300      	movs	r3, #0
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <main+0x16c>)
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2201      	movs	r2, #1
 80023de:	2104      	movs	r1, #4
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fc18 	bl	8000c16 <IR_InterruptInit>

	PB_Init(PORT_A, PIN_6, PULL_UP);
 80023e6:	2201      	movs	r2, #1
 80023e8:	2106      	movs	r1, #6
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe fc89 	bl	8000d02 <PB_Init>
	PB_Init(PORT_A, PIN_7, PULL_UP);
 80023f0:	2201      	movs	r2, #1
 80023f2:	2107      	movs	r1, #7
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7fe fc84 	bl	8000d02 <PB_Init>

	/* Gate Out IR */

	IR_InterruptInit(PORT_A, PIN_5, PULL_UP, RISING_TRIGGER, Gate_OUT_Close, 0, 0);
 80023fa:	2300      	movs	r3, #0
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	2300      	movs	r3, #0
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	4b46      	ldr	r3, [pc, #280]	; (800251c <main+0x170>)
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	2201      	movs	r2, #1
 800240a:	2105      	movs	r1, #5
 800240c:	2000      	movs	r0, #0
 800240e:	f7fe fc02 	bl	8000c16 <IR_InterruptInit>

	/* Parking Spots IR */

	IR_InterruptInit(PORT_B, PIN_6, PULL_UP, RISING_TRIGGER, Parking_1, 0, 0);
 8002412:	2300      	movs	r3, #0
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	2300      	movs	r3, #0
 8002418:	9301      	str	r3, [sp, #4]
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <main+0x174>)
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2201      	movs	r2, #1
 8002422:	2106      	movs	r1, #6
 8002424:	2001      	movs	r0, #1
 8002426:	f7fe fbf6 	bl	8000c16 <IR_InterruptInit>
	IR_InterruptInit(PORT_B, PIN_7, PULL_UP, RISING_TRIGGER, Parking_2, 0, 0);
 800242a:	2300      	movs	r3, #0
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	2300      	movs	r3, #0
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <main+0x178>)
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	2300      	movs	r3, #0
 8002438:	2201      	movs	r2, #1
 800243a:	2107      	movs	r1, #7
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe fbea 	bl	8000c16 <IR_InterruptInit>
	IR_InterruptInit(PORT_B, PIN_8, PULL_UP, RISING_TRIGGER, Parking_3, 0, 0);
 8002442:	2300      	movs	r3, #0
 8002444:	9302      	str	r3, [sp, #8]
 8002446:	2300      	movs	r3, #0
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <main+0x17c>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	2201      	movs	r2, #1
 8002452:	2108      	movs	r1, #8
 8002454:	2001      	movs	r0, #1
 8002456:	f7fe fbde 	bl	8000c16 <IR_InterruptInit>

	/************* DC Motor Initialization ***********/

	DC_Motor_Init();
 800245a:	f7fe fb30 	bl	8000abe <DC_Motor_Init>

	/************* SysTick Initialization ************/

	MSTK_voidInit();
 800245e:	f7ff fc9b 	bl	8001d98 <MSTK_voidInit>
	MSTK_voidIntState();
 8002462:	f7ff fca9 	bl	8001db8 <MSTK_voidIntState>
	CALLBACKSYS(Gate_Time);
 8002466:	4831      	ldr	r0, [pc, #196]	; (800252c <main+0x180>)
 8002468:	f7ff fce6 	bl	8001e38 <CALLBACKSYS>

	/*************** UART Initialization *************/

	Comms_Init(USART_1, 9600);
 800246c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fa9d 	bl	80009b0 <Comms_Init>
	Comms_Enable_Disable(USART_1, ENABLE);
 8002476:	2101      	movs	r1, #1
 8002478:	2000      	movs	r0, #0
 800247a:	f7fe faca 	bl	8000a12 <Comms_Enable_Disable>
	Comms_SetCallBack(USART_1, Gate_OUT_Open);
 800247e:	492c      	ldr	r1, [pc, #176]	; (8002530 <main+0x184>)
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe faff 	bl	8000a84 <Comms_SetCallBack>

	while (1)
	{
		if((g_gate_in == 1) && (PB_Read(PORT_A, PIN_6) == 1)){
 8002486:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <main+0x188>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10b      	bne.n	80024a6 <main+0xfa>
 800248e:	2106      	movs	r1, #6
 8002490:	2000      	movs	r0, #0
 8002492:	f7fe fcca 	bl	8000e2a <PB_Read>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d104      	bne.n	80024a6 <main+0xfa>
			DC_Motor_Rotate(GATE_IN, CW);
 800249c:	2100      	movs	r1, #0
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fb2f 	bl	8000b02 <DC_Motor_Rotate>
 80024a4:	e024      	b.n	80024f0 <main+0x144>
		}
		else if((g_gate_in == 2) && (PB_Read(PORT_A, PIN_7) == 1)){
 80024a6:	4b23      	ldr	r3, [pc, #140]	; (8002534 <main+0x188>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d10b      	bne.n	80024c6 <main+0x11a>
 80024ae:	2107      	movs	r1, #7
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fcba 	bl	8000e2a <PB_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d104      	bne.n	80024c6 <main+0x11a>
			DC_Motor_Rotate(GATE_IN, A_CW);
 80024bc:	2101      	movs	r1, #1
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fb1f 	bl	8000b02 <DC_Motor_Rotate>
 80024c4:	e014      	b.n	80024f0 <main+0x144>
		}
		else if((PB_Read(PORT_A, PIN_6) == 0) || (PB_Read(PORT_A, PIN_7) == 0)){
 80024c6:	2106      	movs	r1, #6
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fcae 	bl	8000e2a <PB_Read>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <main+0x136>
 80024d4:	2107      	movs	r1, #7
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7fe fca7 	bl	8000e2a <PB_Read>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <main+0x144>
			g_gate_in = 0;
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <main+0x188>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
			DC_Motor_Rotate(GATE_IN, STOP);
 80024e8:	2102      	movs	r1, #2
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7fe fb09 	bl	8000b02 <DC_Motor_Rotate>
		}
		if(g_gate_out == 1){
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <main+0x18c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d104      	bne.n	8002502 <main+0x156>
			DC_Motor_Rotate(GATE_OUT, CW);
 80024f8:	2100      	movs	r1, #0
 80024fa:	2001      	movs	r0, #1
 80024fc:	f7fe fb01 	bl	8000b02 <DC_Motor_Rotate>
 8002500:	e7c1      	b.n	8002486 <main+0xda>
		}
		else if(g_gate_out == 2){
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <main+0x18c>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d1bd      	bne.n	8002486 <main+0xda>
			DC_Motor_Rotate(GATE_OUT, A_CW);
 800250a:	2101      	movs	r1, #1
 800250c:	2001      	movs	r0, #1
 800250e:	f7fe faf8 	bl	8000b02 <DC_Motor_Rotate>
		if((g_gate_in == 1) && (PB_Read(PORT_A, PIN_6) == 1)){
 8002512:	e7b8      	b.n	8002486 <main+0xda>
 8002514:	08002331 	.word	0x08002331
 8002518:	08002319 	.word	0x08002319
 800251c:	08002301 	.word	0x08002301
 8002520:	08002235 	.word	0x08002235
 8002524:	08002191 	.word	0x08002191
 8002528:	080020ed 	.word	0x080020ed
 800252c:	08002349 	.word	0x08002349
 8002530:	080022d9 	.word	0x080022d9
 8002534:	20000083 	.word	0x20000083
 8002538:	20000084 	.word	0x20000084

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <SystemInit+0x20>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <SystemInit+0x20>)
 8002590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025ac:	480d      	ldr	r0, [pc, #52]	; (80025e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ae:	490e      	ldr	r1, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b0:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c4:	4c0b      	ldr	r4, [pc, #44]	; (80025f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d2:	f7ff ffd7 	bl	8002584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d6:	f000 f811 	bl	80025fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025da:	f7ff fee7 	bl	80023ac <main>
  bx  lr    
 80025de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80025ec:	08002664 	.word	0x08002664
  ldr r2, =_sbss
 80025f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80025f4:	20000088 	.word	0x20000088

080025f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC_IRQHandler>
	...

080025fc <__libc_init_array>:
 80025fc:	b570      	push	{r4, r5, r6, lr}
 80025fe:	4d0d      	ldr	r5, [pc, #52]	; (8002634 <__libc_init_array+0x38>)
 8002600:	4c0d      	ldr	r4, [pc, #52]	; (8002638 <__libc_init_array+0x3c>)
 8002602:	1b64      	subs	r4, r4, r5
 8002604:	10a4      	asrs	r4, r4, #2
 8002606:	2600      	movs	r6, #0
 8002608:	42a6      	cmp	r6, r4
 800260a:	d109      	bne.n	8002620 <__libc_init_array+0x24>
 800260c:	4d0b      	ldr	r5, [pc, #44]	; (800263c <__libc_init_array+0x40>)
 800260e:	4c0c      	ldr	r4, [pc, #48]	; (8002640 <__libc_init_array+0x44>)
 8002610:	f000 f818 	bl	8002644 <_init>
 8002614:	1b64      	subs	r4, r4, r5
 8002616:	10a4      	asrs	r4, r4, #2
 8002618:	2600      	movs	r6, #0
 800261a:	42a6      	cmp	r6, r4
 800261c:	d105      	bne.n	800262a <__libc_init_array+0x2e>
 800261e:	bd70      	pop	{r4, r5, r6, pc}
 8002620:	f855 3b04 	ldr.w	r3, [r5], #4
 8002624:	4798      	blx	r3
 8002626:	3601      	adds	r6, #1
 8002628:	e7ee      	b.n	8002608 <__libc_init_array+0xc>
 800262a:	f855 3b04 	ldr.w	r3, [r5], #4
 800262e:	4798      	blx	r3
 8002630:	3601      	adds	r6, #1
 8002632:	e7f2      	b.n	800261a <__libc_init_array+0x1e>
 8002634:	0800265c 	.word	0x0800265c
 8002638:	0800265c 	.word	0x0800265c
 800263c:	0800265c 	.word	0x0800265c
 8002640:	08002660 	.word	0x08002660

08002644 <_init>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr

08002650 <_fini>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	bf00      	nop
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr
